
DC_MotorControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000204  00800060  00002b16  00002baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800264  00800264  00002dae  2**0
                  ALLOC
  3 .stab         00001c38  00000000  00000000  00002db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000158d  00000000  00000000  000049e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006307  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008712  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ac70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ae30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b126  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__vector_7>
      20:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <__vector_8>
      24:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__vector_9>
      28:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <__vector_10>
      2c:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e4       	ldi	r26, 0x40	; 64
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 97 12 	jmp	0x252e	; 0x252e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 97 12 	jmp	0x252e	; 0x252e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e4       	ldi	r24, 0x40	; 64
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e4       	ldi	r22, 0x40	; 64
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 af 12 	jmp	0x255e	; 0x255e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 97 12 	jmp	0x252e	; 0x252e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 97 12 	jmp	0x252e	; 0x252e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 97 12 	jmp	0x252e	; 0x252e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 af 12 	jmp	0x255e	; 0x255e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 5b       	subi	r30, 0xB8	; 184
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
#include <util/delay.h>
#include <stdio.h>


int main(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	cf 54       	subi	r28, 0x4F	; 79
     e38:	d0 40       	sbci	r29, 0x00	; 0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
    *no_load_current    0.13 	Amperes
    *stall_current 	    ≤0.8	Amperes
	  */

    // Initialize the DC motor and set it up
	MotorSpecs myMotor = {3.0, 0.02, 1000, 1.3, 1094, 0.13, 0.8};
     e44:	ce 01       	movw	r24, r28
     e46:	8f 96       	adiw	r24, 0x2f	; 47
     e48:	2d 96       	adiw	r28, 0x0d	; 13
     e4a:	9f af       	std	Y+63, r25	; 0x3f
     e4c:	8e af       	std	Y+62, r24	; 0x3e
     e4e:	2d 97       	sbiw	r28, 0x0d	; 13
     e50:	e8 e4       	ldi	r30, 0x48	; 72
     e52:	f2 e0       	ldi	r31, 0x02	; 2
     e54:	2f 96       	adiw	r28, 0x0f	; 15
     e56:	ff af       	std	Y+63, r31	; 0x3f
     e58:	ee af       	std	Y+62, r30	; 0x3e
     e5a:	2f 97       	sbiw	r28, 0x0f	; 15
     e5c:	fc e1       	ldi	r31, 0x1C	; 28
     e5e:	60 96       	adiw	r28, 0x10	; 16
     e60:	ff af       	std	Y+63, r31	; 0x3f
     e62:	60 97       	sbiw	r28, 0x10	; 16
     e64:	2f 96       	adiw	r28, 0x0f	; 15
     e66:	ee ad       	ldd	r30, Y+62	; 0x3e
     e68:	ff ad       	ldd	r31, Y+63	; 0x3f
     e6a:	2f 97       	sbiw	r28, 0x0f	; 15
     e6c:	00 80       	ld	r0, Z
     e6e:	2f 96       	adiw	r28, 0x0f	; 15
     e70:	8e ad       	ldd	r24, Y+62	; 0x3e
     e72:	9f ad       	ldd	r25, Y+63	; 0x3f
     e74:	2f 97       	sbiw	r28, 0x0f	; 15
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	2f 96       	adiw	r28, 0x0f	; 15
     e7a:	9f af       	std	Y+63, r25	; 0x3f
     e7c:	8e af       	std	Y+62, r24	; 0x3e
     e7e:	2f 97       	sbiw	r28, 0x0f	; 15
     e80:	2d 96       	adiw	r28, 0x0d	; 13
     e82:	ee ad       	ldd	r30, Y+62	; 0x3e
     e84:	ff ad       	ldd	r31, Y+63	; 0x3f
     e86:	2d 97       	sbiw	r28, 0x0d	; 13
     e88:	00 82       	st	Z, r0
     e8a:	2d 96       	adiw	r28, 0x0d	; 13
     e8c:	8e ad       	ldd	r24, Y+62	; 0x3e
     e8e:	9f ad       	ldd	r25, Y+63	; 0x3f
     e90:	2d 97       	sbiw	r28, 0x0d	; 13
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	2d 96       	adiw	r28, 0x0d	; 13
     e96:	9f af       	std	Y+63, r25	; 0x3f
     e98:	8e af       	std	Y+62, r24	; 0x3e
     e9a:	2d 97       	sbiw	r28, 0x0d	; 13
     e9c:	60 96       	adiw	r28, 0x10	; 16
     e9e:	9f ad       	ldd	r25, Y+63	; 0x3f
     ea0:	60 97       	sbiw	r28, 0x10	; 16
     ea2:	91 50       	subi	r25, 0x01	; 1
     ea4:	60 96       	adiw	r28, 0x10	; 16
     ea6:	9f af       	std	Y+63, r25	; 0x3f
     ea8:	60 97       	sbiw	r28, 0x10	; 16
     eaa:	60 96       	adiw	r28, 0x10	; 16
     eac:	ef ad       	ldd	r30, Y+63	; 0x3f
     eae:	60 97       	sbiw	r28, 0x10	; 16
     eb0:	ee 23       	and	r30, r30
     eb2:	c1 f6       	brne	.-80     	; 0xe64 <main+0x36>
    DcMotor_Init(&myMotor);
     eb4:	ce 01       	movw	r24, r28
     eb6:	8f 96       	adiw	r24, 0x2f	; 47
     eb8:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DcMotor_Init>

	/* Initialize ADC */
	    ADC_init();
     ebc:	0e 94 18 09 	call	0x1230	; 0x1230 <ADC_init>

	    printf("Testing DC Motor Control:\n");
     ec0:	80 e6       	ldi	r24, 0x60	; 96
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 d7 12 	call	0x25ae	; 0x25ae <puts>

	   /* Test motor at different speeds and directions */
	   printf("Running CW at 50%% speed\n");
     ec8:	00 d0       	rcall	.+0      	; 0xeca <main+0x9c>
     eca:	ed b7       	in	r30, 0x3d	; 61
     ecc:	fe b7       	in	r31, 0x3e	; 62
     ece:	31 96       	adiw	r30, 0x01	; 1
     ed0:	8a e7       	ldi	r24, 0x7A	; 122
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	80 83       	st	Z, r24
     ed8:	0e 94 c2 12 	call	0x2584	; 0x2584 <printf>
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
	   DcMotorControlSpeed(CW_ROTATION, 50);
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	62 e3       	ldi	r22, 0x32	; 50
     ee4:	0e 94 1f 0a 	call	0x143e	; 0x143e <DcMotorControlSpeed>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	aa ef       	ldi	r26, 0xFA	; 250
     eee:	b4 e4       	ldi	r27, 0x44	; 68
     ef0:	8f a3       	std	Y+39, r24	; 0x27
     ef2:	98 a7       	std	Y+40, r25	; 0x28
     ef4:	a9 a7       	std	Y+41, r26	; 0x29
     ef6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef8:	6f a1       	ldd	r22, Y+39	; 0x27
     efa:	78 a5       	ldd	r23, Y+40	; 0x28
     efc:	89 a5       	ldd	r24, Y+41	; 0x29
     efe:	9a a5       	ldd	r25, Y+42	; 0x2a
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	4a e7       	ldi	r20, 0x7A	; 122
     f06:	53 e4       	ldi	r21, 0x43	; 67
     f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	8b a3       	std	Y+35, r24	; 0x23
     f12:	9c a3       	std	Y+36, r25	; 0x24
     f14:	ad a3       	std	Y+37, r26	; 0x25
     f16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f18:	6b a1       	ldd	r22, Y+35	; 0x23
     f1a:	7c a1       	ldd	r23, Y+36	; 0x24
     f1c:	8d a1       	ldd	r24, Y+37	; 0x25
     f1e:	9e a1       	ldd	r25, Y+38	; 0x26
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e8       	ldi	r20, 0x80	; 128
     f26:	5f e3       	ldi	r21, 0x3F	; 63
     f28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f2c:	88 23       	and	r24, r24
     f2e:	2c f4       	brge	.+10     	; 0xf3a <main+0x10c>
		__ticks = 1;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9a a3       	std	Y+34, r25	; 0x22
     f36:	89 a3       	std	Y+33, r24	; 0x21
     f38:	3f c0       	rjmp	.+126    	; 0xfb8 <main+0x18a>
	else if (__tmp > 65535)
     f3a:	6b a1       	ldd	r22, Y+35	; 0x23
     f3c:	7c a1       	ldd	r23, Y+36	; 0x24
     f3e:	8d a1       	ldd	r24, Y+37	; 0x25
     f40:	9e a1       	ldd	r25, Y+38	; 0x26
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	3f ef       	ldi	r19, 0xFF	; 255
     f46:	4f e7       	ldi	r20, 0x7F	; 127
     f48:	57 e4       	ldi	r21, 0x47	; 71
     f4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f4e:	18 16       	cp	r1, r24
     f50:	4c f5       	brge	.+82     	; 0xfa4 <main+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f52:	6f a1       	ldd	r22, Y+39	; 0x27
     f54:	78 a5       	ldd	r23, Y+40	; 0x28
     f56:	89 a5       	ldd	r24, Y+41	; 0x29
     f58:	9a a5       	ldd	r25, Y+42	; 0x2a
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e2       	ldi	r20, 0x20	; 32
     f60:	51 e4       	ldi	r21, 0x41	; 65
     f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	9a a3       	std	Y+34, r25	; 0x22
     f78:	89 a3       	std	Y+33, r24	; 0x21
     f7a:	0f c0       	rjmp	.+30     	; 0xf9a <main+0x16c>
     f7c:	89 e1       	ldi	r24, 0x19	; 25
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	98 a3       	std	Y+32, r25	; 0x20
     f82:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f84:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f86:	98 a1       	ldd	r25, Y+32	; 0x20
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <main+0x15a>
     f8c:	98 a3       	std	Y+32, r25	; 0x20
     f8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f90:	89 a1       	ldd	r24, Y+33	; 0x21
     f92:	9a a1       	ldd	r25, Y+34	; 0x22
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	9a a3       	std	Y+34, r25	; 0x22
     f98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9a:	89 a1       	ldd	r24, Y+33	; 0x21
     f9c:	9a a1       	ldd	r25, Y+34	; 0x22
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	69 f7       	brne	.-38     	; 0xf7c <main+0x14e>
     fa2:	14 c0       	rjmp	.+40     	; 0xfcc <main+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa4:	6b a1       	ldd	r22, Y+35	; 0x23
     fa6:	7c a1       	ldd	r23, Y+36	; 0x24
     fa8:	8d a1       	ldd	r24, Y+37	; 0x25
     faa:	9e a1       	ldd	r25, Y+38	; 0x26
     fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9a a3       	std	Y+34, r25	; 0x22
     fb6:	89 a3       	std	Y+33, r24	; 0x21
     fb8:	89 a1       	ldd	r24, Y+33	; 0x21
     fba:	9a a1       	ldd	r25, Y+34	; 0x22
     fbc:	9e 8f       	std	Y+30, r25	; 0x1e
     fbe:	8d 8f       	std	Y+29, r24	; 0x1d
     fc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <main+0x196>
     fc8:	9e 8f       	std	Y+30, r25	; 0x1e
     fca:	8d 8f       	std	Y+29, r24	; 0x1d
	   _delay_ms(2000);

	   printf("Running CCW at 75%% speed\n");
     fcc:	00 d0       	rcall	.+0      	; 0xfce <main+0x1a0>
     fce:	ed b7       	in	r30, 0x3d	; 61
     fd0:	fe b7       	in	r31, 0x3e	; 62
     fd2:	31 96       	adiw	r30, 0x01	; 1
     fd4:	84 e9       	ldi	r24, 0x94	; 148
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
     fdc:	0e 94 c2 12 	call	0x2584	; 0x2584 <printf>
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
	   DcMotorControlSpeed(CCW_ROTATION, 75);
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	6b e4       	ldi	r22, 0x4B	; 75
     fe8:	0e 94 1f 0a 	call	0x143e	; 0x143e <DcMotorControlSpeed>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	aa ef       	ldi	r26, 0xFA	; 250
     ff2:	b4 e4       	ldi	r27, 0x44	; 68
     ff4:	89 8f       	std	Y+25, r24	; 0x19
     ff6:	9a 8f       	std	Y+26, r25	; 0x1a
     ff8:	ab 8f       	std	Y+27, r26	; 0x1b
     ffa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffc:	69 8d       	ldd	r22, Y+25	; 0x19
     ffe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1000:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1002:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	4a e7       	ldi	r20, 0x7A	; 122
    100a:	53 e4       	ldi	r21, 0x43	; 67
    100c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	8d 8b       	std	Y+21, r24	; 0x15
    1016:	9e 8b       	std	Y+22, r25	; 0x16
    1018:	af 8b       	std	Y+23, r26	; 0x17
    101a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    101c:	6d 89       	ldd	r22, Y+21	; 0x15
    101e:	7e 89       	ldd	r23, Y+22	; 0x16
    1020:	8f 89       	ldd	r24, Y+23	; 0x17
    1022:	98 8d       	ldd	r25, Y+24	; 0x18
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e8       	ldi	r20, 0x80	; 128
    102a:	5f e3       	ldi	r21, 0x3F	; 63
    102c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1030:	88 23       	and	r24, r24
    1032:	2c f4       	brge	.+10     	; 0x103e <main+0x210>
		__ticks = 1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	3f c0       	rjmp	.+126    	; 0x10bc <main+0x28e>
	else if (__tmp > 65535)
    103e:	6d 89       	ldd	r22, Y+21	; 0x15
    1040:	7e 89       	ldd	r23, Y+22	; 0x16
    1042:	8f 89       	ldd	r24, Y+23	; 0x17
    1044:	98 8d       	ldd	r25, Y+24	; 0x18
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	3f ef       	ldi	r19, 0xFF	; 255
    104a:	4f e7       	ldi	r20, 0x7F	; 127
    104c:	57 e4       	ldi	r21, 0x47	; 71
    104e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1052:	18 16       	cp	r1, r24
    1054:	4c f5       	brge	.+82     	; 0x10a8 <main+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1056:	69 8d       	ldd	r22, Y+25	; 0x19
    1058:	7a 8d       	ldd	r23, Y+26	; 0x1a
    105a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    105c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e2       	ldi	r20, 0x20	; 32
    1064:	51 e4       	ldi	r21, 0x41	; 65
    1066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	9c 8b       	std	Y+20, r25	; 0x14
    107c:	8b 8b       	std	Y+19, r24	; 0x13
    107e:	0f c0       	rjmp	.+30     	; 0x109e <main+0x270>
    1080:	89 e1       	ldi	r24, 0x19	; 25
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9a 8b       	std	Y+18, r25	; 0x12
    1086:	89 8b       	std	Y+17, r24	; 0x11
    1088:	89 89       	ldd	r24, Y+17	; 0x11
    108a:	9a 89       	ldd	r25, Y+18	; 0x12
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	f1 f7       	brne	.-4      	; 0x108c <main+0x25e>
    1090:	9a 8b       	std	Y+18, r25	; 0x12
    1092:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1094:	8b 89       	ldd	r24, Y+19	; 0x13
    1096:	9c 89       	ldd	r25, Y+20	; 0x14
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	9c 8b       	std	Y+20, r25	; 0x14
    109c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109e:	8b 89       	ldd	r24, Y+19	; 0x13
    10a0:	9c 89       	ldd	r25, Y+20	; 0x14
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	69 f7       	brne	.-38     	; 0x1080 <main+0x252>
    10a6:	14 c0       	rjmp	.+40     	; 0x10d0 <main+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a8:	6d 89       	ldd	r22, Y+21	; 0x15
    10aa:	7e 89       	ldd	r23, Y+22	; 0x16
    10ac:	8f 89       	ldd	r24, Y+23	; 0x17
    10ae:	98 8d       	ldd	r25, Y+24	; 0x18
    10b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	9c 8b       	std	Y+20, r25	; 0x14
    10ba:	8b 8b       	std	Y+19, r24	; 0x13
    10bc:	8b 89       	ldd	r24, Y+19	; 0x13
    10be:	9c 89       	ldd	r25, Y+20	; 0x14
    10c0:	98 8b       	std	Y+16, r25	; 0x10
    10c2:	8f 87       	std	Y+15, r24	; 0x0f
    10c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c6:	98 89       	ldd	r25, Y+16	; 0x10
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <main+0x29a>
    10cc:	98 8b       	std	Y+16, r25	; 0x10
    10ce:	8f 87       	std	Y+15, r24	; 0x0f
	   _delay_ms(2000);

	   printf("Stopping Motor\n");
    10d0:	8f ea       	ldi	r24, 0xAF	; 175
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 d7 12 	call	0x25ae	; 0x25ae <puts>
	   DcMotorControlSpeed(NO_ROTATION, 100);
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	64 e6       	ldi	r22, 0x64	; 100
    10dc:	0e 94 1f 0a 	call	0x143e	; 0x143e <DcMotorControlSpeed>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	aa ef       	ldi	r26, 0xFA	; 250
    10e6:	b4 e4       	ldi	r27, 0x44	; 68
    10e8:	8b 87       	std	Y+11, r24	; 0x0b
    10ea:	9c 87       	std	Y+12, r25	; 0x0c
    10ec:	ad 87       	std	Y+13, r26	; 0x0d
    10ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	4a e7       	ldi	r20, 0x7A	; 122
    10fe:	53 e4       	ldi	r21, 0x43	; 67
    1100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	8f 83       	std	Y+7, r24	; 0x07
    110a:	98 87       	std	Y+8, r25	; 0x08
    110c:	a9 87       	std	Y+9, r26	; 0x09
    110e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1110:	6f 81       	ldd	r22, Y+7	; 0x07
    1112:	78 85       	ldd	r23, Y+8	; 0x08
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	9a 85       	ldd	r25, Y+10	; 0x0a
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e8       	ldi	r20, 0x80	; 128
    111e:	5f e3       	ldi	r21, 0x3F	; 63
    1120:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1124:	88 23       	and	r24, r24
    1126:	2c f4       	brge	.+10     	; 0x1132 <main+0x304>
		__ticks = 1;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9e 83       	std	Y+6, r25	; 0x06
    112e:	8d 83       	std	Y+5, r24	; 0x05
    1130:	3f c0       	rjmp	.+126    	; 0x11b0 <main+0x382>
	else if (__tmp > 65535)
    1132:	6f 81       	ldd	r22, Y+7	; 0x07
    1134:	78 85       	ldd	r23, Y+8	; 0x08
    1136:	89 85       	ldd	r24, Y+9	; 0x09
    1138:	9a 85       	ldd	r25, Y+10	; 0x0a
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	3f ef       	ldi	r19, 0xFF	; 255
    113e:	4f e7       	ldi	r20, 0x7F	; 127
    1140:	57 e4       	ldi	r21, 0x47	; 71
    1142:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1146:	18 16       	cp	r1, r24
    1148:	4c f5       	brge	.+82     	; 0x119c <main+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114a:	6b 85       	ldd	r22, Y+11	; 0x0b
    114c:	7c 85       	ldd	r23, Y+12	; 0x0c
    114e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1150:	9e 85       	ldd	r25, Y+14	; 0x0e
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e2       	ldi	r20, 0x20	; 32
    1158:	51 e4       	ldi	r21, 0x41	; 65
    115a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	9e 83       	std	Y+6, r25	; 0x06
    1170:	8d 83       	std	Y+5, r24	; 0x05
    1172:	0f c0       	rjmp	.+30     	; 0x1192 <main+0x364>
    1174:	89 e1       	ldi	r24, 0x19	; 25
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9c 83       	std	Y+4, r25	; 0x04
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <main+0x352>
    1184:	9c 83       	std	Y+4, r25	; 0x04
    1186:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	9e 83       	std	Y+6, r25	; 0x06
    1190:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	69 f7       	brne	.-38     	; 0x1174 <main+0x346>
    119a:	14 c0       	rjmp	.+40     	; 0x11c4 <main+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119c:	6f 81       	ldd	r22, Y+7	; 0x07
    119e:	78 85       	ldd	r23, Y+8	; 0x08
    11a0:	89 85       	ldd	r24, Y+9	; 0x09
    11a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	9e 83       	std	Y+6, r25	; 0x06
    11ae:	8d 83       	std	Y+5, r24	; 0x05
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <main+0x38e>
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	89 83       	std	Y+1, r24	; 0x01
	   _delay_ms(2000);

	   /* Test torque control */
	   float32 torque = DcMotorGetTorque();
    11c4:	0e 94 36 0a 	call	0x146c	; 0x146c <DcMotorGetTorque>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	8b a7       	std	Y+43, r24	; 0x2b
    11ce:	9c a7       	std	Y+44, r25	; 0x2c
    11d0:	ad a7       	std	Y+45, r26	; 0x2d
    11d2:	be a7       	std	Y+46, r27	; 0x2e
	   printf("Measured Torque: %.2f kg.cm\n", torque);
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <main+0x3a8>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <main+0x3aa>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <main+0x3ac>
    11da:	ed b7       	in	r30, 0x3d	; 61
    11dc:	fe b7       	in	r31, 0x3e	; 62
    11de:	31 96       	adiw	r30, 0x01	; 1
    11e0:	8e eb       	ldi	r24, 0xBE	; 190
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
    11e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    11ec:	ad a5       	ldd	r26, Y+45	; 0x2d
    11ee:	be a5       	ldd	r27, Y+46	; 0x2e
    11f0:	82 83       	std	Z+2, r24	; 0x02
    11f2:	93 83       	std	Z+3, r25	; 0x03
    11f4:	a4 83       	std	Z+4, r26	; 0x04
    11f6:	b5 83       	std	Z+5, r27	; 0x05
    11f8:	0e 94 c2 12 	call	0x2584	; 0x2584 <printf>
    11fc:	8d b7       	in	r24, 0x3d	; 61
    11fe:	9e b7       	in	r25, 0x3e	; 62
    1200:	06 96       	adiw	r24, 0x06	; 6
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	9e bf       	out	0x3e, r25	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	8d bf       	out	0x3d, r24	; 61

	   /* Adjust SR for specific torque */
	   adjustSRforTorque(0.02);
    120c:	6a e0       	ldi	r22, 0x0A	; 10
    120e:	77 ed       	ldi	r23, 0xD7	; 215
    1210:	83 ea       	ldi	r24, 0xA3	; 163
    1212:	9c e3       	ldi	r25, 0x3C	; 60
    1214:	0e 94 20 0b 	call	0x1640	; 0x1640 <adjustSRforTorque>

    return 0;
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
}
    121c:	c1 5b       	subi	r28, 0xB1	; 177
    121e:	df 4f       	sbci	r29, 0xFF	; 255
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    1238:	e7 e2       	ldi	r30, 0x27	; 39
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	10 82       	st	Z, r1
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
    123e:	e6 e2       	ldi	r30, 0x26	; 38
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	83 e8       	ldi	r24, 0x83	; 131
    1244:	80 83       	st	Z, r24
}
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	0f 92       	push	r0
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	87 70       	andi	r24, 0x07	; 7
    125c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    125e:	a7 e2       	ldi	r26, 0x27	; 39
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e7 e2       	ldi	r30, 0x27	; 39
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	80 7e       	andi	r24, 0xE0	; 224
    126a:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    126c:	a7 e2       	ldi	r26, 0x27	; 39
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e7 e2       	ldi	r30, 0x27	; 39
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	90 81       	ld	r25, Z
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	89 2b       	or	r24, r25
    127a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    127c:	a6 e2       	ldi	r26, 0x26	; 38
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e6 e2       	ldi	r30, 0x26	; 38
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	80 64       	ori	r24, 0x40	; 64
    1288:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    128a:	e6 e2       	ldi	r30, 0x26	; 38
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	80 71       	andi	r24, 0x10	; 16
    1296:	90 70       	andi	r25, 0x00	; 0
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	b9 f3       	breq	.-18     	; 0x128a <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    129c:	a6 e2       	ldi	r26, 0x26	; 38
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e6 e2       	ldi	r30, 0x26	; 38
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 61       	ori	r24, 0x10	; 16
    12a8:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    12aa:	e4 e2       	ldi	r30, 0x24	; 36
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
}
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <DcMotor_Init>:
 * 1. Setup the DC Motor pins directions by use the GPIO driver.
 * 2. Enable Driver.
 * 3. Initialize DC Motor State as Idle.
 */
void DcMotor_Init(const MotorSpecs *motor)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <DcMotor_Init+0x6>
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	9a 83       	std	Y+2, r25	; 0x02
    12c6:	89 83       	std	Y+1, r24	; 0x01
	/* Configure Pins as OUTPUT */
	GPIO_setupPinDirection(DC_MOTOR_INPUT1_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,PIN_OUTPUT);
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_INPUT2_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,PIN_OUTPUT);
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	61 e0       	ldi	r22, 0x01	; 1
    12d6:	41 e0       	ldi	r20, 0x01	; 1
    12d8:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>


	/* Initialize Pins as LOGIC_LOW */
	GPIO_writePin(DC_MOTOR_INPUT1_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_INPUT2_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>

	/*initialize specification of the motor*/

	/* Store motor specifications using arrow operator */
	motor_specs.rated_voltage    = motor->rated_voltage;
    12f0:	e9 81       	ldd	r30, Y+1	; 0x01
    12f2:	fa 81       	ldd	r31, Y+2	; 0x02
    12f4:	80 81       	ld	r24, Z
    12f6:	91 81       	ldd	r25, Z+1	; 0x01
    12f8:	a2 81       	ldd	r26, Z+2	; 0x02
    12fa:	b3 81       	ldd	r27, Z+3	; 0x03
    12fc:	80 93 64 02 	sts	0x0264, r24
    1300:	90 93 65 02 	sts	0x0265, r25
    1304:	a0 93 66 02 	sts	0x0266, r26
    1308:	b0 93 67 02 	sts	0x0267, r27
	motor_specs.rated_torque     = motor->rated_torque;
    130c:	e9 81       	ldd	r30, Y+1	; 0x01
    130e:	fa 81       	ldd	r31, Y+2	; 0x02
    1310:	84 81       	ldd	r24, Z+4	; 0x04
    1312:	95 81       	ldd	r25, Z+5	; 0x05
    1314:	a6 81       	ldd	r26, Z+6	; 0x06
    1316:	b7 81       	ldd	r27, Z+7	; 0x07
    1318:	80 93 68 02 	sts	0x0268, r24
    131c:	90 93 69 02 	sts	0x0269, r25
    1320:	a0 93 6a 02 	sts	0x026A, r26
    1324:	b0 93 6b 02 	sts	0x026B, r27
	motor_specs.rated_speed      = motor->rated_speed;
    1328:	e9 81       	ldd	r30, Y+1	; 0x01
    132a:	fa 81       	ldd	r31, Y+2	; 0x02
    132c:	80 85       	ldd	r24, Z+8	; 0x08
    132e:	91 85       	ldd	r25, Z+9	; 0x09
    1330:	a2 85       	ldd	r26, Z+10	; 0x0a
    1332:	b3 85       	ldd	r27, Z+11	; 0x0b
    1334:	80 93 6c 02 	sts	0x026C, r24
    1338:	90 93 6d 02 	sts	0x026D, r25
    133c:	a0 93 6e 02 	sts	0x026E, r26
    1340:	b0 93 6f 02 	sts	0x026F, r27
	motor_specs.rated_current    = motor->rated_current;
    1344:	e9 81       	ldd	r30, Y+1	; 0x01
    1346:	fa 81       	ldd	r31, Y+2	; 0x02
    1348:	84 85       	ldd	r24, Z+12	; 0x0c
    134a:	95 85       	ldd	r25, Z+13	; 0x0d
    134c:	a6 85       	ldd	r26, Z+14	; 0x0e
    134e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1350:	80 93 70 02 	sts	0x0270, r24
    1354:	90 93 71 02 	sts	0x0271, r25
    1358:	a0 93 72 02 	sts	0x0272, r26
    135c:	b0 93 73 02 	sts	0x0273, r27
	motor_specs.no_load_speed    = motor->no_load_speed;
    1360:	e9 81       	ldd	r30, Y+1	; 0x01
    1362:	fa 81       	ldd	r31, Y+2	; 0x02
    1364:	80 89       	ldd	r24, Z+16	; 0x10
    1366:	91 89       	ldd	r25, Z+17	; 0x11
    1368:	a2 89       	ldd	r26, Z+18	; 0x12
    136a:	b3 89       	ldd	r27, Z+19	; 0x13
    136c:	80 93 74 02 	sts	0x0274, r24
    1370:	90 93 75 02 	sts	0x0275, r25
    1374:	a0 93 76 02 	sts	0x0276, r26
    1378:	b0 93 77 02 	sts	0x0277, r27
	motor_specs.no_load_current  = motor->no_load_current;
    137c:	e9 81       	ldd	r30, Y+1	; 0x01
    137e:	fa 81       	ldd	r31, Y+2	; 0x02
    1380:	84 89       	ldd	r24, Z+20	; 0x14
    1382:	95 89       	ldd	r25, Z+21	; 0x15
    1384:	a6 89       	ldd	r26, Z+22	; 0x16
    1386:	b7 89       	ldd	r27, Z+23	; 0x17
    1388:	80 93 78 02 	sts	0x0278, r24
    138c:	90 93 79 02 	sts	0x0279, r25
    1390:	a0 93 7a 02 	sts	0x027A, r26
    1394:	b0 93 7b 02 	sts	0x027B, r27
	motor_specs.stall_current    = motor->stall_current;
    1398:	e9 81       	ldd	r30, Y+1	; 0x01
    139a:	fa 81       	ldd	r31, Y+2	; 0x02
    139c:	80 8d       	ldd	r24, Z+24	; 0x18
    139e:	91 8d       	ldd	r25, Z+25	; 0x19
    13a0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    13a2:	b3 8d       	ldd	r27, Z+27	; 0x1b
    13a4:	80 93 7c 02 	sts	0x027C, r24
    13a8:	90 93 7d 02 	sts	0x027D, r25
    13ac:	a0 93 7e 02 	sts	0x027E, r26
    13b0:	b0 93 7f 02 	sts	0x027F, r27

}
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <setDirection>:
 *	0- No Rotation
 *	1- CW Rotation
 *	2- CCW Rotation
 */
void setDirection(DcMotor_State direction)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <setDirection+0x6>
    13c4:	0f 92       	push	r0
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	89 83       	std	Y+1, r24	; 0x01
	switch(direction)
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3b 83       	std	Y+3, r19	; 0x03
    13d4:	2a 83       	std	Y+2, r18	; 0x02
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	9b 81       	ldd	r25, Y+3	; 0x03
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	91 05       	cpc	r25, r1
    13de:	a1 f0       	breq	.+40     	; 0x1408 <setDirection+0x4a>
    13e0:	2a 81       	ldd	r18, Y+2	; 0x02
    13e2:	3b 81       	ldd	r19, Y+3	; 0x03
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	d1 f0       	breq	.+52     	; 0x141e <setDirection+0x60>
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	01 f5       	brne	.+64     	; 0x1432 <setDirection+0x74>
		{
		case NO_ROTATION:
			GPIO_writePin(DC_MOTOR_INPUT1_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_INPUT2_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	61 e0       	ldi	r22, 0x01	; 1
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    1406:	15 c0       	rjmp	.+42     	; 0x1432 <setDirection+0x74>
			break;
		case CW_ROTATION:
				GPIO_writePin(DC_MOTOR_INPUT1_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_HIGH);
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	41 e0       	ldi	r20, 0x01	; 1
    140e:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_INPUT2_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    141c:	0a c0       	rjmp	.+20     	; 0x1432 <setDirection+0x74>
				break;
		case CCW_ROTATION:
				GPIO_writePin(DC_MOTOR_INPUT1_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_INPUT2_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_HIGH);
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	41 e0       	ldi	r20, 0x01	; 1
    142e:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
				break;
		}
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <DcMotorControlSpeed>:
 * Set Speed percentage of the DC Motor:
 * 1. Set Direction depending on argument.
 * 2. Set PWM using PWM Driver.
 */
void DcMotorControlSpeed(DcMotor_State direction,uint8 speed)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	00 d0       	rcall	.+0      	; 0x1444 <DcMotorControlSpeed+0x6>
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	6a 83       	std	Y+2, r22	; 0x02
	setDirection(direction);
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	0e 94 df 09 	call	0x13be	; 0x13be <setDirection>

	// Constrain speed between 0-100%
	if (speed > 100) speed = 100;
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	85 36       	cpi	r24, 0x65	; 101
    1456:	10 f0       	brcs	.+4      	; 0x145c <DcMotorControlSpeed+0x1e>
    1458:	84 e6       	ldi	r24, 0x64	; 100
    145a:	8a 83       	std	Y+2, r24	; 0x02
	if (speed < 0  ) speed = 0;

	Timer0_pwmAdjust(speed); //send duty cycle to timer
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	0e 94 11 10 	call	0x2022	; 0x2022 <Timer0_pwmAdjust>
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <DcMotorGetTorque>:
 * Set Torque percentage of the DC Motor:
 * 1. Set Direction depending on argument.
 * 2. Set PWM using PWM Driver.
 */
float32 DcMotorGetTorque()
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	64 97       	sbiw	r28, 0x14	; 20
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
 /*Torque is directly proportional to current.*/
	/*Read CM1 and CM2 from MP6551 driver, should be the same*/
	float32 CM1 = readMotorCurrent(CM1_ADC_CHANNEL);
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <readMotorCurrent>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8d 87       	std	Y+13, r24	; 0x0d
    148c:	9e 87       	std	Y+14, r25	; 0x0e
    148e:	af 87       	std	Y+15, r26	; 0x0f
    1490:	b8 8b       	std	Y+16, r27	; 0x10
	float32 CM2 = readMotorCurrent(CM2_ADC_CHANNEL);
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <readMotorCurrent>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	89 87       	std	Y+9, r24	; 0x09
    149e:	9a 87       	std	Y+10, r25	; 0x0a
    14a0:	ab 87       	std	Y+11, r26	; 0x0b
    14a2:	bc 87       	std	Y+12, r27	; 0x0c

    float32 current = (CM1 + CM2) / 2.0;
    14a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    14a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    14a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14aa:	98 89       	ldd	r25, Y+16	; 0x10
    14ac:	29 85       	ldd	r18, Y+9	; 0x09
    14ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    14b0:	4b 85       	ldd	r20, Y+11	; 0x0b
    14b2:	5c 85       	ldd	r21, Y+12	; 0x0c
    14b4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	50 e4       	ldi	r21, 0x40	; 64
    14c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	af 83       	std	Y+7, r26	; 0x07
    14d6:	b8 87       	std	Y+8, r27	; 0x08

    // Map ADC value to current
	if (current < motor_specs.stall_current) {
    14d8:	80 91 7c 02 	lds	r24, 0x027C
    14dc:	90 91 7d 02 	lds	r25, 0x027D
    14e0:	a0 91 7e 02 	lds	r26, 0x027E
    14e4:	b0 91 7f 02 	lds	r27, 0x027F
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	2d 81       	ldd	r18, Y+5	; 0x05
    14ee:	3e 81       	ldd	r19, Y+6	; 0x06
    14f0:	4f 81       	ldd	r20, Y+7	; 0x07
    14f2:	58 85       	ldd	r21, Y+8	; 0x08
    14f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14f8:	18 16       	cp	r1, r24
    14fa:	4c f4       	brge	.+18     	; 0x150e <DcMotorGetTorque+0xa2>
		return 0.0; // Below stall current, assume no torque
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a0 e0       	ldi	r26, 0x00	; 0
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	89 8b       	std	Y+17, r24	; 0x11
    1506:	9a 8b       	std	Y+18, r25	; 0x12
    1508:	ab 8b       	std	Y+19, r26	; 0x13
    150a:	bc 8b       	std	Y+20, r27	; 0x14
    150c:	3e c0       	rjmp	.+124    	; 0x158a <DcMotorGetTorque+0x11e>
	}
	/* Map current to torque */
	float32 torque = (current / motor_specs.rated_current) * motor_specs.rated_torque;
    150e:	20 91 70 02 	lds	r18, 0x0270
    1512:	30 91 71 02 	lds	r19, 0x0271
    1516:	40 91 72 02 	lds	r20, 0x0272
    151a:	50 91 73 02 	lds	r21, 0x0273
    151e:	6d 81       	ldd	r22, Y+5	; 0x05
    1520:	7e 81       	ldd	r23, Y+6	; 0x06
    1522:	8f 81       	ldd	r24, Y+7	; 0x07
    1524:	98 85       	ldd	r25, Y+8	; 0x08
    1526:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	20 91 68 02 	lds	r18, 0x0268
    1532:	30 91 69 02 	lds	r19, 0x0269
    1536:	40 91 6a 02 	lds	r20, 0x026A
    153a:	50 91 6b 02 	lds	r21, 0x026B
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	9a 83       	std	Y+2, r25	; 0x02
    154e:	ab 83       	std	Y+3, r26	; 0x03
    1550:	bc 83       	std	Y+4, r27	; 0x04

	/* Limit torque to rated value */
	if (torque > motor_specs.rated_torque) {
    1552:	80 91 68 02 	lds	r24, 0x0268
    1556:	90 91 69 02 	lds	r25, 0x0269
    155a:	a0 91 6a 02 	lds	r26, 0x026A
    155e:	b0 91 6b 02 	lds	r27, 0x026B
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	29 81       	ldd	r18, Y+1	; 0x01
    1568:	3a 81       	ldd	r19, Y+2	; 0x02
    156a:	4b 81       	ldd	r20, Y+3	; 0x03
    156c:	5c 81       	ldd	r21, Y+4	; 0x04
    156e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1572:	88 23       	and	r24, r24
    1574:	14 f4       	brge	.+4      	; 0x157a <DcMotorGetTorque+0x10e>
		increaseSRResistance();
    1576:	0e 94 a7 0b 	call	0x174e	; 0x174e <increaseSRResistance>
	}
		return torque;
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	9a 81       	ldd	r25, Y+2	; 0x02
    157e:	ab 81       	ldd	r26, Y+3	; 0x03
    1580:	bc 81       	ldd	r27, Y+4	; 0x04
    1582:	89 8b       	std	Y+17, r24	; 0x11
    1584:	9a 8b       	std	Y+18, r25	; 0x12
    1586:	ab 8b       	std	Y+19, r26	; 0x13
    1588:	bc 8b       	std	Y+20, r27	; 0x14
    158a:	89 89       	ldd	r24, Y+17	; 0x11
    158c:	9a 89       	ldd	r25, Y+18	; 0x12
    158e:	ab 89       	ldd	r26, Y+19	; 0x13
    1590:	bc 89       	ldd	r27, Y+20	; 0x14

}
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	64 96       	adiw	r28, 0x14	; 20
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <readMotorCurrent>:

float32 readMotorCurrent(uint8 channel) {
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	2b 97       	sbiw	r28, 0x0b	; 11
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	8b 87       	std	Y+11, r24	; 0x0b
    uint16 adc_value = ADC_readChannel(channel);
    15be:	8b 85       	ldd	r24, Y+11	; 0x0b
    15c0:	0e 94 26 09 	call	0x124c	; 0x124c <ADC_readChannel>
    15c4:	9a 87       	std	Y+10, r25	; 0x0a
    15c6:	89 87       	std	Y+9, r24	; 0x09
    float32 voltage = (adc_value / ADC_MAXIMUM_VALUE) * ADC_REF_VOLT_VALUE;
    15c8:	89 85       	ldd	r24, Y+9	; 0x09
    15ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    15cc:	2f ef       	ldi	r18, 0xFF	; 255
    15ce:	33 e0       	ldi	r19, 0x03	; 3
    15d0:	b9 01       	movw	r22, r18
    15d2:	0e 94 55 12 	call	0x24aa	; 0x24aa <__udivmodhi4>
    15d6:	cb 01       	movw	r24, r22
    15d8:	9c 01       	movw	r18, r24
    15da:	c9 01       	movw	r24, r18
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	82 0f       	add	r24, r18
    15e6:	93 1f       	adc	r25, r19
    15e8:	cc 01       	movw	r24, r24
    15ea:	a0 e0       	ldi	r26, 0x00	; 0
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	8d 83       	std	Y+5, r24	; 0x05
    15fc:	9e 83       	std	Y+6, r25	; 0x06
    15fe:	af 83       	std	Y+7, r26	; 0x07
    1600:	b8 87       	std	Y+8, r27	; 0x08

    /* Convert voltage to current using the sense resistor formula */
        float32 current = voltage / MP6551_SENSE_RESISTOR;
    1602:	6d 81       	ldd	r22, Y+5	; 0x05
    1604:	7e 81       	ldd	r23, Y+6	; 0x06
    1606:	8f 81       	ldd	r24, Y+7	; 0x07
    1608:	98 85       	ldd	r25, Y+8	; 0x08
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e4       	ldi	r19, 0x40	; 64
    160e:	4c e9       	ldi	r20, 0x9C	; 156
    1610:	55 e4       	ldi	r21, 0x45	; 69
    1612:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	ab 83       	std	Y+3, r26	; 0x03
    1620:	bc 83       	std	Y+4, r27	; 0x04

    return current ;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	ab 81       	ldd	r26, Y+3	; 0x03
    1628:	bc 81       	ldd	r27, Y+4	; 0x04
}
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	2b 96       	adiw	r28, 0x0b	; 11
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <adjustSRforTorque>:

void adjustSRforTorque(float32 desired_torque) {
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	2c 97       	sbiw	r28, 0x0c	; 12
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	69 87       	std	Y+9, r22	; 0x09
    165e:	7a 87       	std	Y+10, r23	; 0x0a
    1660:	8b 87       	std	Y+11, r24	; 0x0b
    1662:	9c 87       	std	Y+12, r25	; 0x0c
    /* Convert torque to required current */
    float32 required_current = (desired_torque / motor_specs.rated_torque) * motor_specs.rated_current;
    1664:	20 91 68 02 	lds	r18, 0x0268
    1668:	30 91 69 02 	lds	r19, 0x0269
    166c:	40 91 6a 02 	lds	r20, 0x026A
    1670:	50 91 6b 02 	lds	r21, 0x026B
    1674:	69 85       	ldd	r22, Y+9	; 0x09
    1676:	7a 85       	ldd	r23, Y+10	; 0x0a
    1678:	8b 85       	ldd	r24, Y+11	; 0x0b
    167a:	9c 85       	ldd	r25, Y+12	; 0x0c
    167c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	20 91 70 02 	lds	r18, 0x0270
    1688:	30 91 71 02 	lds	r19, 0x0271
    168c:	40 91 72 02 	lds	r20, 0x0272
    1690:	50 91 73 02 	lds	r21, 0x0273
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8d 83       	std	Y+5, r24	; 0x05
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	af 83       	std	Y+7, r26	; 0x07
    16a6:	b8 87       	std	Y+8, r27	; 0x08

    /* Read actual motor current from ADC */
    float32 actual_current = (readMotorCurrent(CM1_ADC_CHANNEL) + readMotorCurrent(CM2_ADC_CHANNEL)) / 2.0;
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <readMotorCurrent>
    16ae:	7b 01       	movw	r14, r22
    16b0:	8c 01       	movw	r16, r24
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <readMotorCurrent>
    16b8:	9b 01       	movw	r18, r22
    16ba:	ac 01       	movw	r20, r24
    16bc:	c8 01       	movw	r24, r16
    16be:	b7 01       	movw	r22, r14
    16c0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	50 e4       	ldi	r21, 0x40	; 64
    16d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	9a 83       	std	Y+2, r25	; 0x02
    16e0:	ab 83       	std	Y+3, r26	; 0x03
    16e2:	bc 83       	std	Y+4, r27	; 0x04

    /* If the actual current is higher than required, adjust SR potentiometer */
    if (actual_current > required_current) {
    16e4:	69 81       	ldd	r22, Y+1	; 0x01
    16e6:	7a 81       	ldd	r23, Y+2	; 0x02
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	9c 81       	ldd	r25, Y+4	; 0x04
    16ec:	2d 81       	ldd	r18, Y+5	; 0x05
    16ee:	3e 81       	ldd	r19, Y+6	; 0x06
    16f0:	4f 81       	ldd	r20, Y+7	; 0x07
    16f2:	58 85       	ldd	r21, Y+8	; 0x08
    16f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16f8:	18 16       	cp	r1, r24
    16fa:	1c f4       	brge	.+6      	; 0x1702 <adjustSRforTorque+0xc2>
        /* Increase SR resistance to lower current */
    	increaseSRResistance();
    16fc:	0e 94 a7 0b 	call	0x174e	; 0x174e <increaseSRResistance>
    1700:	0e c0       	rjmp	.+28     	; 0x171e <adjustSRforTorque+0xde>
    } else if (actual_current < required_current) {
    1702:	69 81       	ldd	r22, Y+1	; 0x01
    1704:	7a 81       	ldd	r23, Y+2	; 0x02
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	2d 81       	ldd	r18, Y+5	; 0x05
    170c:	3e 81       	ldd	r19, Y+6	; 0x06
    170e:	4f 81       	ldd	r20, Y+7	; 0x07
    1710:	58 85       	ldd	r21, Y+8	; 0x08
    1712:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1716:	88 23       	and	r24, r24
    1718:	14 f4       	brge	.+4      	; 0x171e <adjustSRforTorque+0xde>
        /*  Decrease SR resistance to allow more current */
    	decreaseSRResistance();
    171a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <decreaseSRResistance>
    }

}
    171e:	2c 96       	adiw	r28, 0x0c	; 12
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	08 95       	ret

00001738 <decreaseSRResistance>:

void decreaseSRResistance()
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	printf("You Should Decrease Resistance to Allow More Current\n");
    1740:	8b ed       	ldi	r24, 0xDB	; 219
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 d7 12 	call	0x25ae	; 0x25ae <puts>
}
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <increaseSRResistance>:

void increaseSRResistance()
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
	printf("You Should Increase Resistance to Lower Current\n");
    1756:	80 e1       	ldi	r24, 0x10	; 16
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	0e 94 d7 12 	call	0x25ae	; 0x25ae <puts>
}
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <GPIO_setupPinDirection+0x6>
    176a:	00 d0       	rcall	.+0      	; 0x176c <GPIO_setupPinDirection+0x8>
    176c:	0f 92       	push	r0
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	6a 83       	std	Y+2, r22	; 0x02
    1776:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	88 30       	cpi	r24, 0x08	; 8
    177c:	08 f0       	brcs	.+2      	; 0x1780 <GPIO_setupPinDirection+0x1c>
    177e:	d5 c0       	rjmp	.+426    	; 0x192a <GPIO_setupPinDirection+0x1c6>
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	84 30       	cpi	r24, 0x04	; 4
    1784:	08 f0       	brcs	.+2      	; 0x1788 <GPIO_setupPinDirection+0x24>
    1786:	d1 c0       	rjmp	.+418    	; 0x192a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	3d 83       	std	Y+5, r19	; 0x05
    1790:	2c 83       	std	Y+4, r18	; 0x04
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	91 05       	cpc	r25, r1
    179a:	09 f4       	brne	.+2      	; 0x179e <GPIO_setupPinDirection+0x3a>
    179c:	43 c0       	rjmp	.+134    	; 0x1824 <GPIO_setupPinDirection+0xc0>
    179e:	2c 81       	ldd	r18, Y+4	; 0x04
    17a0:	3d 81       	ldd	r19, Y+5	; 0x05
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <GPIO_setupPinDirection+0x4e>
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	9d 81       	ldd	r25, Y+5	; 0x05
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	71 f0       	breq	.+28     	; 0x17cc <GPIO_setupPinDirection+0x68>
    17b0:	bc c0       	rjmp	.+376    	; 0x192a <GPIO_setupPinDirection+0x1c6>
    17b2:	2c 81       	ldd	r18, Y+4	; 0x04
    17b4:	3d 81       	ldd	r19, Y+5	; 0x05
    17b6:	22 30       	cpi	r18, 0x02	; 2
    17b8:	31 05       	cpc	r19, r1
    17ba:	09 f4       	brne	.+2      	; 0x17be <GPIO_setupPinDirection+0x5a>
    17bc:	5f c0       	rjmp	.+190    	; 0x187c <GPIO_setupPinDirection+0x118>
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	83 30       	cpi	r24, 0x03	; 3
    17c4:	91 05       	cpc	r25, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <GPIO_setupPinDirection+0x66>
    17c8:	85 c0       	rjmp	.+266    	; 0x18d4 <GPIO_setupPinDirection+0x170>
    17ca:	af c0       	rjmp	.+350    	; 0x192a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	a1 f4       	brne	.+40     	; 0x17fa <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17d2:	aa e3       	ldi	r26, 0x3A	; 58
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	ea e3       	ldi	r30, 0x3A	; 58
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <GPIO_setupPinDirection+0x8c>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <GPIO_setupPinDirection+0x88>
    17f4:	84 2b       	or	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	98 c0       	rjmp	.+304    	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    17fa:	aa e3       	ldi	r26, 0x3A	; 58
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	ea e3       	ldi	r30, 0x3A	; 58
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <GPIO_setupPinDirection+0xb4>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <GPIO_setupPinDirection+0xb0>
    181c:	80 95       	com	r24
    181e:	84 23       	and	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	83 c0       	rjmp	.+262    	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	a1 f4       	brne	.+40     	; 0x1852 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    182a:	a7 e3       	ldi	r26, 0x37	; 55
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e7 e3       	ldi	r30, 0x37	; 55
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <GPIO_setupPinDirection+0xe4>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <GPIO_setupPinDirection+0xe0>
    184c:	84 2b       	or	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	6c c0       	rjmp	.+216    	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1852:	a7 e3       	ldi	r26, 0x37	; 55
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e7 e3       	ldi	r30, 0x37	; 55
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <GPIO_setupPinDirection+0x10c>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <GPIO_setupPinDirection+0x108>
    1874:	80 95       	com	r24
    1876:	84 23       	and	r24, r20
    1878:	8c 93       	st	X, r24
    187a:	57 c0       	rjmp	.+174    	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	a1 f4       	brne	.+40     	; 0x18aa <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1882:	a4 e3       	ldi	r26, 0x34	; 52
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e4 e3       	ldi	r30, 0x34	; 52
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <GPIO_setupPinDirection+0x13c>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <GPIO_setupPinDirection+0x138>
    18a4:	84 2b       	or	r24, r20
    18a6:	8c 93       	st	X, r24
    18a8:	40 c0       	rjmp	.+128    	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    18aa:	a4 e3       	ldi	r26, 0x34	; 52
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e4 e3       	ldi	r30, 0x34	; 52
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <GPIO_setupPinDirection+0x164>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <GPIO_setupPinDirection+0x160>
    18cc:	80 95       	com	r24
    18ce:	84 23       	and	r24, r20
    18d0:	8c 93       	st	X, r24
    18d2:	2b c0       	rjmp	.+86     	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	a1 f4       	brne	.+40     	; 0x1902 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    18da:	a1 e3       	ldi	r26, 0x31	; 49
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e1 e3       	ldi	r30, 0x31	; 49
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <GPIO_setupPinDirection+0x194>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <GPIO_setupPinDirection+0x190>
    18fc:	84 2b       	or	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	14 c0       	rjmp	.+40     	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1902:	a1 e3       	ldi	r26, 0x31	; 49
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e1 e3       	ldi	r30, 0x31	; 49
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <GPIO_setupPinDirection+0x1bc>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <GPIO_setupPinDirection+0x1b8>
    1924:	80 95       	com	r24
    1926:	84 23       	and	r24, r20
    1928:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <GPIO_writePin+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <GPIO_writePin+0x8>
    1942:	0f 92       	push	r0
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	6a 83       	std	Y+2, r22	; 0x02
    194c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	88 30       	cpi	r24, 0x08	; 8
    1952:	08 f0       	brcs	.+2      	; 0x1956 <GPIO_writePin+0x1c>
    1954:	d5 c0       	rjmp	.+426    	; 0x1b00 <GPIO_writePin+0x1c6>
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	84 30       	cpi	r24, 0x04	; 4
    195a:	08 f0       	brcs	.+2      	; 0x195e <GPIO_writePin+0x24>
    195c:	d1 c0       	rjmp	.+418    	; 0x1b00 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	3d 83       	std	Y+5, r19	; 0x05
    1966:	2c 83       	std	Y+4, r18	; 0x04
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	9d 81       	ldd	r25, Y+5	; 0x05
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	91 05       	cpc	r25, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <GPIO_writePin+0x3a>
    1972:	43 c0       	rjmp	.+134    	; 0x19fa <GPIO_writePin+0xc0>
    1974:	2c 81       	ldd	r18, Y+4	; 0x04
    1976:	3d 81       	ldd	r19, Y+5	; 0x05
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	2c f4       	brge	.+10     	; 0x1988 <GPIO_writePin+0x4e>
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	9d 81       	ldd	r25, Y+5	; 0x05
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	71 f0       	breq	.+28     	; 0x19a2 <GPIO_writePin+0x68>
    1986:	bc c0       	rjmp	.+376    	; 0x1b00 <GPIO_writePin+0x1c6>
    1988:	2c 81       	ldd	r18, Y+4	; 0x04
    198a:	3d 81       	ldd	r19, Y+5	; 0x05
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	09 f4       	brne	.+2      	; 0x1994 <GPIO_writePin+0x5a>
    1992:	5f c0       	rjmp	.+190    	; 0x1a52 <GPIO_writePin+0x118>
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	83 30       	cpi	r24, 0x03	; 3
    199a:	91 05       	cpc	r25, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <GPIO_writePin+0x66>
    199e:	85 c0       	rjmp	.+266    	; 0x1aaa <GPIO_writePin+0x170>
    19a0:	af c0       	rjmp	.+350    	; 0x1b00 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	a1 f4       	brne	.+40     	; 0x19d0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    19a8:	ab e3       	ldi	r26, 0x3B	; 59
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	eb e3       	ldi	r30, 0x3B	; 59
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <GPIO_writePin+0x8c>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <GPIO_writePin+0x88>
    19ca:	84 2b       	or	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	98 c0       	rjmp	.+304    	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19d0:	ab e3       	ldi	r26, 0x3B	; 59
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	eb e3       	ldi	r30, 0x3B	; 59
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <GPIO_writePin+0xb4>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <GPIO_writePin+0xb0>
    19f2:	80 95       	com	r24
    19f4:	84 23       	and	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	83 c0       	rjmp	.+262    	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	a1 f4       	brne	.+40     	; 0x1a28 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a00:	a8 e3       	ldi	r26, 0x38	; 56
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e8 e3       	ldi	r30, 0x38	; 56
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 2e       	mov	r0, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <GPIO_writePin+0xe4>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <GPIO_writePin+0xe0>
    1a22:	84 2b       	or	r24, r20
    1a24:	8c 93       	st	X, r24
    1a26:	6c c0       	rjmp	.+216    	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a28:	a8 e3       	ldi	r26, 0x38	; 56
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e8 e3       	ldi	r30, 0x38	; 56
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <GPIO_writePin+0x10c>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <GPIO_writePin+0x108>
    1a4a:	80 95       	com	r24
    1a4c:	84 23       	and	r24, r20
    1a4e:	8c 93       	st	X, r24
    1a50:	57 c0       	rjmp	.+174    	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	a1 f4       	brne	.+40     	; 0x1a80 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a58:	a5 e3       	ldi	r26, 0x35	; 53
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e5 e3       	ldi	r30, 0x35	; 53
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <GPIO_writePin+0x13c>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <GPIO_writePin+0x138>
    1a7a:	84 2b       	or	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	40 c0       	rjmp	.+128    	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a80:	a5 e3       	ldi	r26, 0x35	; 53
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e5 e3       	ldi	r30, 0x35	; 53
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <GPIO_writePin+0x164>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <GPIO_writePin+0x160>
    1aa2:	80 95       	com	r24
    1aa4:	84 23       	and	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	2b c0       	rjmp	.+86     	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	a1 f4       	brne	.+40     	; 0x1ad8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ab0:	a2 e3       	ldi	r26, 0x32	; 50
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e2 e3       	ldi	r30, 0x32	; 50
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 2e       	mov	r0, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <GPIO_writePin+0x194>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	0a 94       	dec	r0
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <GPIO_writePin+0x190>
    1ad2:	84 2b       	or	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	14 c0       	rjmp	.+40     	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ad8:	a2 e3       	ldi	r26, 0x32	; 50
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e2 e3       	ldi	r30, 0x32	; 50
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <GPIO_writePin+0x1bc>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <GPIO_writePin+0x1b8>
    1afa:	80 95       	com	r24
    1afc:	84 23       	and	r24, r20
    1afe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <GPIO_readPin+0x6>
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <GPIO_readPin+0x8>
    1b18:	0f 92       	push	r0
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	8a 83       	std	Y+2, r24	; 0x02
    1b20:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b22:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	88 30       	cpi	r24, 0x08	; 8
    1b28:	08 f0       	brcs	.+2      	; 0x1b2c <GPIO_readPin+0x1c>
    1b2a:	84 c0       	rjmp	.+264    	; 0x1c34 <GPIO_readPin+0x124>
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	84 30       	cpi	r24, 0x04	; 4
    1b30:	08 f0       	brcs	.+2      	; 0x1b34 <GPIO_readPin+0x24>
    1b32:	80 c0       	rjmp	.+256    	; 0x1c34 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	3d 83       	std	Y+5, r19	; 0x05
    1b3c:	2c 83       	std	Y+4, r18	; 0x04
    1b3e:	4c 81       	ldd	r20, Y+4	; 0x04
    1b40:	5d 81       	ldd	r21, Y+5	; 0x05
    1b42:	41 30       	cpi	r20, 0x01	; 1
    1b44:	51 05       	cpc	r21, r1
    1b46:	79 f1       	breq	.+94     	; 0x1ba6 <GPIO_readPin+0x96>
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4c:	82 30       	cpi	r24, 0x02	; 2
    1b4e:	91 05       	cpc	r25, r1
    1b50:	34 f4       	brge	.+12     	; 0x1b5e <GPIO_readPin+0x4e>
    1b52:	2c 81       	ldd	r18, Y+4	; 0x04
    1b54:	3d 81       	ldd	r19, Y+5	; 0x05
    1b56:	21 15       	cp	r18, r1
    1b58:	31 05       	cpc	r19, r1
    1b5a:	69 f0       	breq	.+26     	; 0x1b76 <GPIO_readPin+0x66>
    1b5c:	6b c0       	rjmp	.+214    	; 0x1c34 <GPIO_readPin+0x124>
    1b5e:	4c 81       	ldd	r20, Y+4	; 0x04
    1b60:	5d 81       	ldd	r21, Y+5	; 0x05
    1b62:	42 30       	cpi	r20, 0x02	; 2
    1b64:	51 05       	cpc	r21, r1
    1b66:	b9 f1       	breq	.+110    	; 0x1bd6 <GPIO_readPin+0xc6>
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6c:	83 30       	cpi	r24, 0x03	; 3
    1b6e:	91 05       	cpc	r25, r1
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <GPIO_readPin+0x64>
    1b72:	49 c0       	rjmp	.+146    	; 0x1c06 <GPIO_readPin+0xf6>
    1b74:	5f c0       	rjmp	.+190    	; 0x1c34 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1b76:	e9 e3       	ldi	r30, 0x39	; 57
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a9 01       	movw	r20, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <GPIO_readPin+0x7e>
    1b8a:	55 95       	asr	r21
    1b8c:	47 95       	ror	r20
    1b8e:	8a 95       	dec	r24
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <GPIO_readPin+0x7a>
    1b92:	ca 01       	movw	r24, r20
    1b94:	81 70       	andi	r24, 0x01	; 1
    1b96:	90 70       	andi	r25, 0x00	; 0
    1b98:	88 23       	and	r24, r24
    1b9a:	19 f0       	breq	.+6      	; 0x1ba2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	49 c0       	rjmp	.+146    	; 0x1c34 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ba2:	19 82       	std	Y+1, r1	; 0x01
    1ba4:	47 c0       	rjmp	.+142    	; 0x1c34 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ba6:	e6 e3       	ldi	r30, 0x36	; 54
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	88 2f       	mov	r24, r24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a9 01       	movw	r20, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <GPIO_readPin+0xae>
    1bba:	55 95       	asr	r21
    1bbc:	47 95       	ror	r20
    1bbe:	8a 95       	dec	r24
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <GPIO_readPin+0xaa>
    1bc2:	ca 01       	movw	r24, r20
    1bc4:	81 70       	andi	r24, 0x01	; 1
    1bc6:	90 70       	andi	r25, 0x00	; 0
    1bc8:	88 23       	and	r24, r24
    1bca:	19 f0       	breq	.+6      	; 0x1bd2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	31 c0       	rjmp	.+98     	; 0x1c34 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bd2:	19 82       	std	Y+1, r1	; 0x01
    1bd4:	2f c0       	rjmp	.+94     	; 0x1c34 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1bd6:	e3 e3       	ldi	r30, 0x33	; 51
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	a9 01       	movw	r20, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <GPIO_readPin+0xde>
    1bea:	55 95       	asr	r21
    1bec:	47 95       	ror	r20
    1bee:	8a 95       	dec	r24
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <GPIO_readPin+0xda>
    1bf2:	ca 01       	movw	r24, r20
    1bf4:	81 70       	andi	r24, 0x01	; 1
    1bf6:	90 70       	andi	r25, 0x00	; 0
    1bf8:	88 23       	and	r24, r24
    1bfa:	19 f0       	breq	.+6      	; 0x1c02 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	19 c0       	rjmp	.+50     	; 0x1c34 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c02:	19 82       	std	Y+1, r1	; 0x01
    1c04:	17 c0       	rjmp	.+46     	; 0x1c34 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c06:	e0 e3       	ldi	r30, 0x30	; 48
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a9 01       	movw	r20, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <GPIO_readPin+0x10e>
    1c1a:	55 95       	asr	r21
    1c1c:	47 95       	ror	r20
    1c1e:	8a 95       	dec	r24
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <GPIO_readPin+0x10a>
    1c22:	ca 01       	movw	r24, r20
    1c24:	81 70       	andi	r24, 0x01	; 1
    1c26:	90 70       	andi	r25, 0x00	; 0
    1c28:	88 23       	and	r24, r24
    1c2a:	19 f0       	breq	.+6      	; 0x1c32 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c32:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <GPIO_setupPortDirection+0x6>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <GPIO_setupPortDirection+0x8>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	84 30       	cpi	r24, 0x04	; 4
    1c5a:	90 f5       	brcc	.+100    	; 0x1cc0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	3c 83       	std	Y+4, r19	; 0x04
    1c64:	2b 83       	std	Y+3, r18	; 0x03
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	d1 f0       	breq	.+52     	; 0x1ca4 <GPIO_setupPortDirection+0x5e>
    1c70:	2b 81       	ldd	r18, Y+3	; 0x03
    1c72:	3c 81       	ldd	r19, Y+4	; 0x04
    1c74:	22 30       	cpi	r18, 0x02	; 2
    1c76:	31 05       	cpc	r19, r1
    1c78:	2c f4       	brge	.+10     	; 0x1c84 <GPIO_setupPortDirection+0x3e>
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	61 f0       	breq	.+24     	; 0x1c9a <GPIO_setupPortDirection+0x54>
    1c82:	1e c0       	rjmp	.+60     	; 0x1cc0 <GPIO_setupPortDirection+0x7a>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	81 f0       	breq	.+32     	; 0x1cae <GPIO_setupPortDirection+0x68>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	83 30       	cpi	r24, 0x03	; 3
    1c94:	91 05       	cpc	r25, r1
    1c96:	81 f0       	breq	.+32     	; 0x1cb8 <GPIO_setupPortDirection+0x72>
    1c98:	13 c0       	rjmp	.+38     	; 0x1cc0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c9a:	ea e3       	ldi	r30, 0x3A	; 58
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	80 83       	st	Z, r24
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ca4:	e7 e3       	ldi	r30, 0x37	; 55
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	80 83       	st	Z, r24
    1cac:	09 c0       	rjmp	.+18     	; 0x1cc0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1cae:	e4 e3       	ldi	r30, 0x34	; 52
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	80 83       	st	Z, r24
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1cb8:	e1 e3       	ldi	r30, 0x31	; 49
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <GPIO_writePort+0x6>
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <GPIO_writePort+0x8>
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	84 30       	cpi	r24, 0x04	; 4
    1ce2:	90 f5       	brcc	.+100    	; 0x1d48 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	3c 83       	std	Y+4, r19	; 0x04
    1cec:	2b 83       	std	Y+3, r18	; 0x03
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	d1 f0       	breq	.+52     	; 0x1d2c <GPIO_writePort+0x5e>
    1cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <GPIO_writePort+0x3e>
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	61 f0       	breq	.+24     	; 0x1d22 <GPIO_writePort+0x54>
    1d0a:	1e c0       	rjmp	.+60     	; 0x1d48 <GPIO_writePort+0x7a>
    1d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d10:	22 30       	cpi	r18, 0x02	; 2
    1d12:	31 05       	cpc	r19, r1
    1d14:	81 f0       	breq	.+32     	; 0x1d36 <GPIO_writePort+0x68>
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	81 f0       	breq	.+32     	; 0x1d40 <GPIO_writePort+0x72>
    1d20:	13 c0       	rjmp	.+38     	; 0x1d48 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d22:	eb e3       	ldi	r30, 0x3B	; 59
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	80 83       	st	Z, r24
    1d2a:	0e c0       	rjmp	.+28     	; 0x1d48 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d2c:	e8 e3       	ldi	r30, 0x38	; 56
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	80 83       	st	Z, r24
    1d34:	09 c0       	rjmp	.+18     	; 0x1d48 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d36:	e5 e3       	ldi	r30, 0x35	; 53
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	80 83       	st	Z, r24
    1d3e:	04 c0       	rjmp	.+8      	; 0x1d48 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d40:	e2 e3       	ldi	r30, 0x32	; 50
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <GPIO_readPort+0x6>
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <GPIO_readPort+0x8>
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1d64:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	84 30       	cpi	r24, 0x04	; 4
    1d6a:	90 f5       	brcc	.+100    	; 0x1dd0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	3c 83       	std	Y+4, r19	; 0x04
    1d74:	2b 83       	std	Y+3, r18	; 0x03
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	81 30       	cpi	r24, 0x01	; 1
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	d1 f0       	breq	.+52     	; 0x1db4 <GPIO_readPort+0x5e>
    1d80:	2b 81       	ldd	r18, Y+3	; 0x03
    1d82:	3c 81       	ldd	r19, Y+4	; 0x04
    1d84:	22 30       	cpi	r18, 0x02	; 2
    1d86:	31 05       	cpc	r19, r1
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <GPIO_readPort+0x3e>
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	61 f0       	breq	.+24     	; 0x1daa <GPIO_readPort+0x54>
    1d92:	1e c0       	rjmp	.+60     	; 0x1dd0 <GPIO_readPort+0x7a>
    1d94:	2b 81       	ldd	r18, Y+3	; 0x03
    1d96:	3c 81       	ldd	r19, Y+4	; 0x04
    1d98:	22 30       	cpi	r18, 0x02	; 2
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	81 f0       	breq	.+32     	; 0x1dbe <GPIO_readPort+0x68>
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	83 30       	cpi	r24, 0x03	; 3
    1da4:	91 05       	cpc	r25, r1
    1da6:	81 f0       	breq	.+32     	; 0x1dc8 <GPIO_readPort+0x72>
    1da8:	13 c0       	rjmp	.+38     	; 0x1dd0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1daa:	e9 e3       	ldi	r30, 0x39	; 57
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	0e c0       	rjmp	.+28     	; 0x1dd0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1db4:	e6 e3       	ldi	r30, 0x36	; 54
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	09 c0       	rjmp	.+18     	; 0x1dd0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1dbe:	e3 e3       	ldi	r30, 0x33	; 51
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	04 c0       	rjmp	.+8      	; 0x1dd0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1dc8:	e0 e3       	ldi	r30, 0x30	; 48
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <__vector_10>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_COMP_vect)
{
    1de0:	1f 92       	push	r1
    1de2:	0f 92       	push	r0
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	0f 92       	push	r0
    1de8:	11 24       	eor	r1, r1
    1dea:	2f 93       	push	r18
    1dec:	3f 93       	push	r19
    1dee:	4f 93       	push	r20
    1df0:	5f 93       	push	r21
    1df2:	6f 93       	push	r22
    1df4:	7f 93       	push	r23
    1df6:	8f 93       	push	r24
    1df8:	9f 93       	push	r25
    1dfa:	af 93       	push	r26
    1dfc:	bf 93       	push	r27
    1dfe:	ef 93       	push	r30
    1e00:	ff 93       	push	r31
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T0 != NULL_PTR)
    1e0a:	80 91 80 02 	lds	r24, 0x0280
    1e0e:	90 91 81 02 	lds	r25, 0x0281
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	29 f0       	breq	.+10     	; 0x1e20 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e16:	e0 91 80 02 	lds	r30, 0x0280
    1e1a:	f0 91 81 02 	lds	r31, 0x0281
    1e1e:	09 95       	icall
	}
}
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	ff 91       	pop	r31
    1e26:	ef 91       	pop	r30
    1e28:	bf 91       	pop	r27
    1e2a:	af 91       	pop	r26
    1e2c:	9f 91       	pop	r25
    1e2e:	8f 91       	pop	r24
    1e30:	7f 91       	pop	r23
    1e32:	6f 91       	pop	r22
    1e34:	5f 91       	pop	r21
    1e36:	4f 91       	pop	r20
    1e38:	3f 91       	pop	r19
    1e3a:	2f 91       	pop	r18
    1e3c:	0f 90       	pop	r0
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	0f 90       	pop	r0
    1e42:	1f 90       	pop	r1
    1e44:	18 95       	reti

00001e46 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1e46:	1f 92       	push	r1
    1e48:	0f 92       	push	r0
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	0f 92       	push	r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	2f 93       	push	r18
    1e52:	3f 93       	push	r19
    1e54:	4f 93       	push	r20
    1e56:	5f 93       	push	r21
    1e58:	6f 93       	push	r22
    1e5a:	7f 93       	push	r23
    1e5c:	8f 93       	push	r24
    1e5e:	9f 93       	push	r25
    1e60:	af 93       	push	r26
    1e62:	bf 93       	push	r27
    1e64:	ef 93       	push	r30
    1e66:	ff 93       	push	r31
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T0 != NULL_PTR)
    1e70:	80 91 80 02 	lds	r24, 0x0280
    1e74:	90 91 81 02 	lds	r25, 0x0281
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	29 f0       	breq	.+10     	; 0x1e86 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e7c:	e0 91 80 02 	lds	r30, 0x0280
    1e80:	f0 91 81 02 	lds	r31, 0x0281
    1e84:	09 95       	icall
	}
}
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	ff 91       	pop	r31
    1e8c:	ef 91       	pop	r30
    1e8e:	bf 91       	pop	r27
    1e90:	af 91       	pop	r26
    1e92:	9f 91       	pop	r25
    1e94:	8f 91       	pop	r24
    1e96:	7f 91       	pop	r23
    1e98:	6f 91       	pop	r22
    1e9a:	5f 91       	pop	r21
    1e9c:	4f 91       	pop	r20
    1e9e:	3f 91       	pop	r19
    1ea0:	2f 91       	pop	r18
    1ea2:	0f 90       	pop	r0
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	0f 90       	pop	r0
    1ea8:	1f 90       	pop	r1
    1eaa:	18 95       	reti

00001eac <Timer0_init>:
 * 4. Setup compare value if required
 * 5. Set PWM Pins as output if required
 * 6. Enable Interrupts
 */
void Timer0_init(const Timer0_ConfigType * Config_Ptr)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <Timer0_init+0x6>
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = (TCCR0 & 0xBF) | ((Config_Ptr->mode & 0x01) << 6);
    1eba:	a3 e5       	ldi	r26, 0x53	; 83
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e3 e5       	ldi	r30, 0x53	; 83
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	2f 7b       	andi	r18, 0xBF	; 191
    1ec8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eca:	fa 81       	ldd	r31, Y+2	; 0x02
    1ecc:	83 81       	ldd	r24, Z+3	; 0x03
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	81 70       	andi	r24, 0x01	; 1
    1ed4:	90 70       	andi	r25, 0x00	; 0
    1ed6:	00 24       	eor	r0, r0
    1ed8:	96 95       	lsr	r25
    1eda:	87 95       	ror	r24
    1edc:	07 94       	ror	r0
    1ede:	96 95       	lsr	r25
    1ee0:	87 95       	ror	r24
    1ee2:	07 94       	ror	r0
    1ee4:	98 2f       	mov	r25, r24
    1ee6:	80 2d       	mov	r24, r0
    1ee8:	82 2b       	or	r24, r18
    1eea:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF7) | ((Config_Ptr->mode & 0x02) << 2);  // Configure timer mode
    1eec:	a3 e5       	ldi	r26, 0x53	; 83
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e3 e5       	ldi	r30, 0x53	; 83
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	27 7f       	andi	r18, 0xF7	; 247
    1efa:	e9 81       	ldd	r30, Y+1	; 0x01
    1efc:	fa 81       	ldd	r31, Y+2	; 0x02
    1efe:	83 81       	ldd	r24, Z+3	; 0x03
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	82 70       	andi	r24, 0x02	; 2
    1f06:	90 70       	andi	r25, 0x00	; 0
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	82 2b       	or	r24, r18
    1f12:	8c 93       	st	X, r24

	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler & 0x07); // Setup prescaler
    1f14:	a3 e5       	ldi	r26, 0x53	; 83
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e3 e5       	ldi	r30, 0x53	; 83
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	98 2f       	mov	r25, r24
    1f20:	98 7f       	andi	r25, 0xF8	; 248
    1f22:	e9 81       	ldd	r30, Y+1	; 0x01
    1f24:	fa 81       	ldd	r31, Y+2	; 0x02
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	87 70       	andi	r24, 0x07	; 7
    1f2a:	89 2b       	or	r24, r25
    1f2c:	8c 93       	st	X, r24

	TCNT0 = Config_Ptr->initial_value; // Set initial value
    1f2e:	a2 e5       	ldi	r26, 0x52	; 82
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e9 81       	ldd	r30, Y+1	; 0x01
    1f34:	fa 81       	ldd	r31, Y+2	; 0x02
    1f36:	80 81       	ld	r24, Z
    1f38:	8c 93       	st	X, r24

	if ((Config_Ptr->mode != NORM_T0) && (Config_Ptr->mode != CTC_T0))
    1f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3e:	83 81       	ldd	r24, Z+3	; 0x03
    1f40:	88 23       	and	r24, r24
    1f42:	51 f0       	breq	.+20     	; 0x1f58 <Timer0_init+0xac>
    1f44:	e9 81       	ldd	r30, Y+1	; 0x01
    1f46:	fa 81       	ldd	r31, Y+2	; 0x02
    1f48:	83 81       	ldd	r24, Z+3	; 0x03
    1f4a:	82 30       	cpi	r24, 0x02	; 2
    1f4c:	29 f0       	breq	.+10     	; 0x1f58 <Timer0_init+0xac>
	{
		GPIO_setupPinDirection(PWM_T0_ENABLE_PORT_ID, PWM_T0_ENABLE_PIN_ID, PIN_OUTPUT); // Set PWM pin as output
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	63 e0       	ldi	r22, 0x03	; 3
    1f52:	41 e0       	ldi	r20, 0x01	; 1
    1f54:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	}

	if (Config_Ptr->mode != NORM_T0)
    1f58:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5c:	83 81       	ldd	r24, Z+3	; 0x03
    1f5e:	88 23       	and	r24, r24
    1f60:	21 f1       	breq	.+72     	; 0x1faa <Timer0_init+0xfe>
	{
		TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->comp_match & 0x03) << 4); // Set compare match event
    1f62:	a3 e5       	ldi	r26, 0x53	; 83
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e3 e5       	ldi	r30, 0x53	; 83
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	2f 7c       	andi	r18, 0xCF	; 207
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	84 81       	ldd	r24, Z+4	; 0x04
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	83 70       	andi	r24, 0x03	; 3
    1f7c:	90 70       	andi	r25, 0x00	; 0
    1f7e:	82 95       	swap	r24
    1f80:	92 95       	swap	r25
    1f82:	90 7f       	andi	r25, 0xF0	; 240
    1f84:	98 27       	eor	r25, r24
    1f86:	80 7f       	andi	r24, 0xF0	; 240
    1f88:	98 27       	eor	r25, r24
    1f8a:	82 2b       	or	r24, r18
    1f8c:	8c 93       	st	X, r24
		OCR0 = Config_Ptr->compare_value; // Set compare value
    1f8e:	ac e5       	ldi	r26, 0x5C	; 92
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e9 81       	ldd	r30, Y+1	; 0x01
    1f94:	fa 81       	ldd	r31, Y+2	; 0x02
    1f96:	81 81       	ldd	r24, Z+1	; 0x01
    1f98:	8c 93       	st	X, r24
		SET_BIT(TIMSK, OCIE0); // Enable compare interrupt
    1f9a:	a9 e5       	ldi	r26, 0x59	; 89
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e9 e5       	ldi	r30, 0x59	; 89
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	82 60       	ori	r24, 0x02	; 2
    1fa6:	8c 93       	st	X, r24
    1fa8:	07 c0       	rjmp	.+14     	; 0x1fb8 <Timer0_init+0x10c>
	}
	else
	{
		SET_BIT(TIMSK, TOIE0); // Enable overflow interrupt
    1faa:	a9 e5       	ldi	r26, 0x59	; 89
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e9 e5       	ldi	r30, 0x59	; 89
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	81 60       	ori	r24, 0x01	; 1
    1fb6:	8c 93       	st	X, r24
	}
}
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <Timer0_deInit>:
/*
 * Description :
 * Functional responsible for Deinitialization of Timer 1 by clearing all registers
 */
void Timer0_deInit(void)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    1fca:	e3 e5       	ldi	r30, 0x53	; 83
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	10 82       	st	Z, r1
	TCNT0=0;
    1fd0:	e2 e5       	ldi	r30, 0x52	; 82
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	10 82       	st	Z, r1
	OCR0=0;
    1fd6:	ec e5       	ldi	r30, 0x5C	; 92
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
    1fdc:	a9 e5       	ldi	r26, 0x59	; 89
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e9 e5       	ldi	r30, 0x59	; 89
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	8d 7f       	andi	r24, 0xFD	; 253
    1fe8:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    1fea:	a9 e5       	ldi	r26, 0x59	; 89
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e9 e5       	ldi	r30, 0x59	; 89
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8e 7f       	andi	r24, 0xFE	; 254
    1ff6:	8c 93       	st	X, r24
}
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	00 d0       	rcall	.+0      	; 0x2004 <Timer0_setCallBack+0x6>
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	9a 83       	std	Y+2, r25	; 0x02
    200a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_T0 = a_ptr;
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	90 93 81 02 	sts	0x0281, r25
    2014:	80 93 80 02 	sts	0x0280, r24
}
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <Timer0_pwmAdjust>:

/*
 * Description: Adjust PWM compare value if input is percentage
 */
void Timer0_pwmAdjust(uint8 duty_cycle)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <Timer0_pwmAdjust+0x6>
    2028:	00 d0       	rcall	.+0      	; 0x202a <Timer0_pwmAdjust+0x8>
    202a:	00 d0       	rcall	.+0      	; 0x202c <Timer0_pwmAdjust+0xa>
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	8e 83       	std	Y+6, r24	; 0x06
	duty_cycle  = (uint8)(((uint16)255*duty_cycle)/100); //define compare value
    2032:	8e 81       	ldd	r24, Y+6	; 0x06
    2034:	48 2f       	mov	r20, r24
    2036:	50 e0       	ldi	r21, 0x00	; 0
    2038:	ca 01       	movw	r24, r20
    203a:	9c 01       	movw	r18, r24
    203c:	22 0f       	add	r18, r18
    203e:	33 1f       	adc	r19, r19
    2040:	c9 01       	movw	r24, r18
    2042:	96 95       	lsr	r25
    2044:	98 2f       	mov	r25, r24
    2046:	88 27       	eor	r24, r24
    2048:	97 95       	ror	r25
    204a:	87 95       	ror	r24
    204c:	82 1b       	sub	r24, r18
    204e:	93 0b       	sbc	r25, r19
    2050:	84 0f       	add	r24, r20
    2052:	95 1f       	adc	r25, r21
    2054:	24 e6       	ldi	r18, 0x64	; 100
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	b9 01       	movw	r22, r18
    205a:	0e 94 55 12 	call	0x24aa	; 0x24aa <__udivmodhi4>
    205e:	cb 01       	movw	r24, r22
    2060:	8e 83       	std	Y+6, r24	; 0x06
	Timer0_ConfigType ConfigPTR={0,duty_cycle,PS_8_T0,FAST_PWM_T0,CLEAR_T0}; //initialize timer as desired
    2062:	19 82       	std	Y+1, r1	; 0x01
    2064:	8e 81       	ldd	r24, Y+6	; 0x06
    2066:	8a 83       	std	Y+2, r24	; 0x02
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	8b 83       	std	Y+3, r24	; 0x03
    206c:	83 e0       	ldi	r24, 0x03	; 3
    206e:	8c 83       	std	Y+4, r24	; 0x04
    2070:	82 e0       	ldi	r24, 0x02	; 2
    2072:	8d 83       	std	Y+5, r24	; 0x05
	Timer0_init(&ConfigPTR);
    2074:	ce 01       	movw	r24, r28
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	0e 94 56 0f 	call	0x1eac	; 0x1eac <Timer0_init>
	GPIO_writePin(PWM_T0_ENABLE_PORT_ID, PWM_T0_ENABLE_PIN_ID, LOGIC_HIGH);
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	63 e0       	ldi	r22, 0x03	; 3
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>

}
    2086:	26 96       	adiw	r28, 0x06	; 6
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    2098:	1f 92       	push	r1
    209a:	0f 92       	push	r0
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	0f 92       	push	r0
    20a0:	11 24       	eor	r1, r1
    20a2:	2f 93       	push	r18
    20a4:	3f 93       	push	r19
    20a6:	4f 93       	push	r20
    20a8:	5f 93       	push	r21
    20aa:	6f 93       	push	r22
    20ac:	7f 93       	push	r23
    20ae:	8f 93       	push	r24
    20b0:	9f 93       	push	r25
    20b2:	af 93       	push	r26
    20b4:	bf 93       	push	r27
    20b6:	ef 93       	push	r30
    20b8:	ff 93       	push	r31
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    20c2:	80 91 82 02 	lds	r24, 0x0282
    20c6:	90 91 83 02 	lds	r25, 0x0283
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	29 f0       	breq	.+10     	; 0x20d8 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    20ce:	e0 91 82 02 	lds	r30, 0x0282
    20d2:	f0 91 83 02 	lds	r31, 0x0283
    20d6:	09 95       	icall
	}
}
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	ff 91       	pop	r31
    20de:	ef 91       	pop	r30
    20e0:	bf 91       	pop	r27
    20e2:	af 91       	pop	r26
    20e4:	9f 91       	pop	r25
    20e6:	8f 91       	pop	r24
    20e8:	7f 91       	pop	r23
    20ea:	6f 91       	pop	r22
    20ec:	5f 91       	pop	r21
    20ee:	4f 91       	pop	r20
    20f0:	3f 91       	pop	r19
    20f2:	2f 91       	pop	r18
    20f4:	0f 90       	pop	r0
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	0f 90       	pop	r0
    20fa:	1f 90       	pop	r1
    20fc:	18 95       	reti

000020fe <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    20fe:	1f 92       	push	r1
    2100:	0f 92       	push	r0
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	0f 92       	push	r0
    2106:	11 24       	eor	r1, r1
    2108:	2f 93       	push	r18
    210a:	3f 93       	push	r19
    210c:	4f 93       	push	r20
    210e:	5f 93       	push	r21
    2110:	6f 93       	push	r22
    2112:	7f 93       	push	r23
    2114:	8f 93       	push	r24
    2116:	9f 93       	push	r25
    2118:	af 93       	push	r26
    211a:	bf 93       	push	r27
    211c:	ef 93       	push	r30
    211e:	ff 93       	push	r31
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    2128:	80 91 82 02 	lds	r24, 0x0282
    212c:	90 91 83 02 	lds	r25, 0x0283
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	29 f0       	breq	.+10     	; 0x213e <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2134:	e0 91 82 02 	lds	r30, 0x0282
    2138:	f0 91 83 02 	lds	r31, 0x0283
    213c:	09 95       	icall
	}
}
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	ff 91       	pop	r31
    2144:	ef 91       	pop	r30
    2146:	bf 91       	pop	r27
    2148:	af 91       	pop	r26
    214a:	9f 91       	pop	r25
    214c:	8f 91       	pop	r24
    214e:	7f 91       	pop	r23
    2150:	6f 91       	pop	r22
    2152:	5f 91       	pop	r21
    2154:	4f 91       	pop	r20
    2156:	3f 91       	pop	r19
    2158:	2f 91       	pop	r18
    215a:	0f 90       	pop	r0
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	0f 90       	pop	r0
    2160:	1f 90       	pop	r1
    2162:	18 95       	reti

00002164 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2164:	1f 92       	push	r1
    2166:	0f 92       	push	r0
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	0f 92       	push	r0
    216c:	11 24       	eor	r1, r1
    216e:	2f 93       	push	r18
    2170:	3f 93       	push	r19
    2172:	4f 93       	push	r20
    2174:	5f 93       	push	r21
    2176:	6f 93       	push	r22
    2178:	7f 93       	push	r23
    217a:	8f 93       	push	r24
    217c:	9f 93       	push	r25
    217e:	af 93       	push	r26
    2180:	bf 93       	push	r27
    2182:	ef 93       	push	r30
    2184:	ff 93       	push	r31
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    218e:	80 91 82 02 	lds	r24, 0x0282
    2192:	90 91 83 02 	lds	r25, 0x0283
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	29 f0       	breq	.+10     	; 0x21a4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    219a:	e0 91 82 02 	lds	r30, 0x0282
    219e:	f0 91 83 02 	lds	r31, 0x0283
    21a2:	09 95       	icall
	}
}
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	ff 91       	pop	r31
    21aa:	ef 91       	pop	r30
    21ac:	bf 91       	pop	r27
    21ae:	af 91       	pop	r26
    21b0:	9f 91       	pop	r25
    21b2:	8f 91       	pop	r24
    21b4:	7f 91       	pop	r23
    21b6:	6f 91       	pop	r22
    21b8:	5f 91       	pop	r21
    21ba:	4f 91       	pop	r20
    21bc:	3f 91       	pop	r19
    21be:	2f 91       	pop	r18
    21c0:	0f 90       	pop	r0
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	0f 90       	pop	r0
    21c6:	1f 90       	pop	r1
    21c8:	18 95       	reti

000021ca <Timer1_init>:
 * 4. Setup compare value if required
 * 5. Set PWM Pins as output if required
 * 6. Enable Interrupts
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <Timer1_init+0x6>
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A=(TCCR1A & 0xFC)|(Config_Ptr->mode & 0x03); //configure timer mode
    21d8:	af e4       	ldi	r26, 0x4F	; 79
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	ef e4       	ldi	r30, 0x4F	; 79
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	98 2f       	mov	r25, r24
    21e4:	9c 7f       	andi	r25, 0xFC	; 252
    21e6:	e9 81       	ldd	r30, Y+1	; 0x01
    21e8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ea:	85 81       	ldd	r24, Z+5	; 0x05
    21ec:	83 70       	andi	r24, 0x03	; 3
    21ee:	89 2b       	or	r24, r25
    21f0:	8c 93       	st	X, r24
	TCCR1B=(TCCR1B & 0XE7)|((Config_Ptr->mode & 0x0C)<<1);
    21f2:	ae e4       	ldi	r26, 0x4E	; 78
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	ee e4       	ldi	r30, 0x4E	; 78
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	28 2f       	mov	r18, r24
    21fe:	27 7e       	andi	r18, 0xE7	; 231
    2200:	e9 81       	ldd	r30, Y+1	; 0x01
    2202:	fa 81       	ldd	r31, Y+2	; 0x02
    2204:	85 81       	ldd	r24, Z+5	; 0x05
    2206:	88 2f       	mov	r24, r24
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	8c 70       	andi	r24, 0x0C	; 12
    220c:	90 70       	andi	r25, 0x00	; 0
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	82 2b       	or	r24, r18
    2214:	8c 93       	st	X, r24

	TCCR1B=(TCCR1B & 0xF8)|(Config_Ptr->prescaler & 0x07); //setup prescaler
    2216:	ae e4       	ldi	r26, 0x4E	; 78
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	ee e4       	ldi	r30, 0x4E	; 78
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	98 2f       	mov	r25, r24
    2222:	98 7f       	andi	r25, 0xF8	; 248
    2224:	e9 81       	ldd	r30, Y+1	; 0x01
    2226:	fa 81       	ldd	r31, Y+2	; 0x02
    2228:	84 81       	ldd	r24, Z+4	; 0x04
    222a:	87 70       	andi	r24, 0x07	; 7
    222c:	89 2b       	or	r24, r25
    222e:	8c 93       	st	X, r24

	TCNT1=Config_Ptr->initial_value; //define initial value
    2230:	ac e4       	ldi	r26, 0x4C	; 76
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e9 81       	ldd	r30, Y+1	; 0x01
    2236:	fa 81       	ldd	r31, Y+2	; 0x02
    2238:	80 81       	ld	r24, Z
    223a:	91 81       	ldd	r25, Z+1	; 0x01
    223c:	11 96       	adiw	r26, 0x01	; 1
    223e:	9c 93       	st	X, r25
    2240:	8e 93       	st	-X, r24


	//define pwm pin as output
	if((Config_Ptr->mode!=NORM_T1)&&(Config_Ptr->mode!=CTC_OCR_T1)&&(Config_Ptr->mode!=CTC_ICR_T1))
    2242:	e9 81       	ldd	r30, Y+1	; 0x01
    2244:	fa 81       	ldd	r31, Y+2	; 0x02
    2246:	85 81       	ldd	r24, Z+5	; 0x05
    2248:	88 23       	and	r24, r24
    224a:	f9 f0       	breq	.+62     	; 0x228a <Timer1_init+0xc0>
    224c:	e9 81       	ldd	r30, Y+1	; 0x01
    224e:	fa 81       	ldd	r31, Y+2	; 0x02
    2250:	85 81       	ldd	r24, Z+5	; 0x05
    2252:	84 30       	cpi	r24, 0x04	; 4
    2254:	d1 f0       	breq	.+52     	; 0x228a <Timer1_init+0xc0>
    2256:	e9 81       	ldd	r30, Y+1	; 0x01
    2258:	fa 81       	ldd	r31, Y+2	; 0x02
    225a:	85 81       	ldd	r24, Z+5	; 0x05
    225c:	8c 30       	cpi	r24, 0x0C	; 12
    225e:	a9 f0       	breq	.+42     	; 0x228a <Timer1_init+0xc0>
	{
		if(Config_Ptr->index==TIMER1A)
    2260:	e9 81       	ldd	r30, Y+1	; 0x01
    2262:	fa 81       	ldd	r31, Y+2	; 0x02
    2264:	86 81       	ldd	r24, Z+6	; 0x06
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	31 f4       	brne	.+12     	; 0x2276 <Timer1_init+0xac>
			{
			GPIO_setupPinDirection(PWM_T1A_ENABLE_PORT_ID,PWM_T1A_ENABLE_PIN_ID,PIN_OUTPUT);
    226a:	83 e0       	ldi	r24, 0x03	; 3
    226c:	65 e0       	ldi	r22, 0x05	; 5
    226e:	41 e0       	ldi	r20, 0x01	; 1
    2270:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
    2274:	0a c0       	rjmp	.+20     	; 0x228a <Timer1_init+0xc0>
			}
			else if(Config_Ptr->index==TIMER1B)
    2276:	e9 81       	ldd	r30, Y+1	; 0x01
    2278:	fa 81       	ldd	r31, Y+2	; 0x02
    227a:	86 81       	ldd	r24, Z+6	; 0x06
    227c:	82 30       	cpi	r24, 0x02	; 2
    227e:	29 f4       	brne	.+10     	; 0x228a <Timer1_init+0xc0>
			{
				GPIO_setupPinDirection(PWM_T1B_ENABLE_PORT_ID,PWM_T1B_ENABLE_PIN_ID,PIN_OUTPUT);
    2280:	83 e0       	ldi	r24, 0x03	; 3
    2282:	64 e0       	ldi	r22, 0x04	; 4
    2284:	41 e0       	ldi	r20, 0x01	; 1
    2286:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
			}
	}

	if(Config_Ptr->mode!=NORM_T1)
    228a:	e9 81       	ldd	r30, Y+1	; 0x01
    228c:	fa 81       	ldd	r31, Y+2	; 0x02
    228e:	85 81       	ldd	r24, Z+5	; 0x05
    2290:	88 23       	and	r24, r24
    2292:	09 f4       	brne	.+2      	; 0x2296 <Timer1_init+0xcc>
    2294:	59 c0       	rjmp	.+178    	; 0x2348 <Timer1_init+0x17e>
	{
		if(Config_Ptr->index==TIMER1A)
    2296:	e9 81       	ldd	r30, Y+1	; 0x01
    2298:	fa 81       	ldd	r31, Y+2	; 0x02
    229a:	86 81       	ldd	r24, Z+6	; 0x06
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	41 f5       	brne	.+80     	; 0x22f0 <Timer1_init+0x126>
			{
				TCCR1A=(TCCR1A & 0x3F)|((Config_Ptr->comp_match & 0x03)<<6); //set compare match event
    22a0:	af e4       	ldi	r26, 0x4F	; 79
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	ef e4       	ldi	r30, 0x4F	; 79
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	28 2f       	mov	r18, r24
    22ac:	2f 73       	andi	r18, 0x3F	; 63
    22ae:	e9 81       	ldd	r30, Y+1	; 0x01
    22b0:	fa 81       	ldd	r31, Y+2	; 0x02
    22b2:	87 81       	ldd	r24, Z+7	; 0x07
    22b4:	88 2f       	mov	r24, r24
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	00 24       	eor	r0, r0
    22ba:	96 95       	lsr	r25
    22bc:	87 95       	ror	r24
    22be:	07 94       	ror	r0
    22c0:	96 95       	lsr	r25
    22c2:	87 95       	ror	r24
    22c4:	07 94       	ror	r0
    22c6:	98 2f       	mov	r25, r24
    22c8:	80 2d       	mov	r24, r0
    22ca:	82 2b       	or	r24, r18
    22cc:	8c 93       	st	X, r24
				OCR1A=Config_Ptr->compare_value; //define compare value
    22ce:	aa e4       	ldi	r26, 0x4A	; 74
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e9 81       	ldd	r30, Y+1	; 0x01
    22d4:	fa 81       	ldd	r31, Y+2	; 0x02
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	11 96       	adiw	r26, 0x01	; 1
    22dc:	9c 93       	st	X, r25
    22de:	8e 93       	st	-X, r24
				SET_BIT(TIMSK,OCIE1A); //enable compare interrupt
    22e0:	a9 e5       	ldi	r26, 0x59	; 89
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e9 e5       	ldi	r30, 0x59	; 89
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	80 61       	ori	r24, 0x10	; 16
    22ec:	8c 93       	st	X, r24
    22ee:	33 c0       	rjmp	.+102    	; 0x2356 <Timer1_init+0x18c>
			}
			else if(Config_Ptr->index==TIMER1B)
    22f0:	e9 81       	ldd	r30, Y+1	; 0x01
    22f2:	fa 81       	ldd	r31, Y+2	; 0x02
    22f4:	86 81       	ldd	r24, Z+6	; 0x06
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	71 f5       	brne	.+92     	; 0x2356 <Timer1_init+0x18c>
			{
				TCCR1A=(TCCR1A & 0xCF)|((Config_Ptr->comp_match & 0x03)<<4); //set compare match event
    22fa:	af e4       	ldi	r26, 0x4F	; 79
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	ef e4       	ldi	r30, 0x4F	; 79
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	28 2f       	mov	r18, r24
    2306:	2f 7c       	andi	r18, 0xCF	; 207
    2308:	e9 81       	ldd	r30, Y+1	; 0x01
    230a:	fa 81       	ldd	r31, Y+2	; 0x02
    230c:	87 81       	ldd	r24, Z+7	; 0x07
    230e:	88 2f       	mov	r24, r24
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	83 70       	andi	r24, 0x03	; 3
    2314:	90 70       	andi	r25, 0x00	; 0
    2316:	82 95       	swap	r24
    2318:	92 95       	swap	r25
    231a:	90 7f       	andi	r25, 0xF0	; 240
    231c:	98 27       	eor	r25, r24
    231e:	80 7f       	andi	r24, 0xF0	; 240
    2320:	98 27       	eor	r25, r24
    2322:	82 2b       	or	r24, r18
    2324:	8c 93       	st	X, r24
				OCR1B=Config_Ptr->compare_value; //define compare value
    2326:	a8 e4       	ldi	r26, 0x48	; 72
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e9 81       	ldd	r30, Y+1	; 0x01
    232c:	fa 81       	ldd	r31, Y+2	; 0x02
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	11 96       	adiw	r26, 0x01	; 1
    2334:	9c 93       	st	X, r25
    2336:	8e 93       	st	-X, r24
				SET_BIT(TIMSK,OCIE1B); //enable compare interrupt
    2338:	a9 e5       	ldi	r26, 0x59	; 89
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e9 e5       	ldi	r30, 0x59	; 89
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	88 60       	ori	r24, 0x08	; 8
    2344:	8c 93       	st	X, r24
    2346:	07 c0       	rjmp	.+14     	; 0x2356 <Timer1_init+0x18c>
			}
	}
	else
	{
		SET_BIT(TIMSK,TOIE1); //enable overflow interrupt
    2348:	a9 e5       	ldi	r26, 0x59	; 89
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	e9 e5       	ldi	r30, 0x59	; 89
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	84 60       	ori	r24, 0x04	; 4
    2354:	8c 93       	st	X, r24
	}
}
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <Timer1_deInit>:
/*
 * Description :
 * Functional responsible for Deinitialization of Timer 1 by clearing all registers
 */
void Timer1_deInit(void)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2368:	ef e4       	ldi	r30, 0x4F	; 79
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	10 82       	st	Z, r1
	TCCR1B=0;
    236e:	ee e4       	ldi	r30, 0x4E	; 78
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	10 82       	st	Z, r1
	TCNT1=0;
    2374:	ec e4       	ldi	r30, 0x4C	; 76
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	11 82       	std	Z+1, r1	; 0x01
    237a:	10 82       	st	Z, r1
	OCR1A=0;
    237c:	ea e4       	ldi	r30, 0x4A	; 74
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	11 82       	std	Z+1, r1	; 0x01
    2382:	10 82       	st	Z, r1
	OCR1B=0;
    2384:	e8 e4       	ldi	r30, 0x48	; 72
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	11 82       	std	Z+1, r1	; 0x01
    238a:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE1A);
    238c:	a9 e5       	ldi	r26, 0x59	; 89
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e9 e5       	ldi	r30, 0x59	; 89
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	8f 7e       	andi	r24, 0xEF	; 239
    2398:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1B);
    239a:	a9 e5       	ldi	r26, 0x59	; 89
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e9 e5       	ldi	r30, 0x59	; 89
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	87 7f       	andi	r24, 0xF7	; 247
    23a6:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE1);
    23a8:	a9 e5       	ldi	r26, 0x59	; 89
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e9 e5       	ldi	r30, 0x59	; 89
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	8b 7f       	andi	r24, 0xFB	; 251
    23b4:	8c 93       	st	X, r24
}
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <Timer1_setCallBack+0x6>
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_T1 = a_ptr;
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	90 93 83 02 	sts	0x0283, r25
    23d2:	80 93 82 02 	sts	0x0282, r24
}
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <Timer1_pwmAdjust>:

/*
 * Description: Adjust PWM compare value if input is percentage
 */
void Timer1_pwmAdjust(uint16 duty_cycle)
{
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	2a 97       	sbiw	r28, 0x0a	; 10
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	9a 87       	std	Y+10, r25	; 0x0a
    23f6:	89 87       	std	Y+9, r24	; 0x09
	duty_cycle  = (uint16)(((uint32)65535*duty_cycle)/100); //define compare value
    23f8:	89 85       	ldd	r24, Y+9	; 0x09
    23fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fc:	cc 01       	movw	r24, r24
    23fe:	a0 e0       	ldi	r26, 0x00	; 0
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	2f ef       	ldi	r18, 0xFF	; 255
    2404:	3f ef       	ldi	r19, 0xFF	; 255
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 36 12 	call	0x246c	; 0x246c <__mulsi3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	24 e6       	ldi	r18, 0x64	; 100
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__udivmodsi4>
    2426:	da 01       	movw	r26, r20
    2428:	c9 01       	movw	r24, r18
    242a:	9a 87       	std	Y+10, r25	; 0x0a
    242c:	89 87       	std	Y+9, r24	; 0x09
	Timer1_ConfigType ConfigPTR={0,duty_cycle,PS_8_T1,FAST_PWM_OCR_T1,CLEAR_T1}; //initialize timer as desired
    242e:	88 e0       	ldi	r24, 0x08	; 8
    2430:	fe 01       	movw	r30, r28
    2432:	31 96       	adiw	r30, 0x01	; 1
    2434:	df 01       	movw	r26, r30
    2436:	98 2f       	mov	r25, r24
    2438:	1d 92       	st	X+, r1
    243a:	9a 95       	dec	r25
    243c:	e9 f7       	brne	.-6      	; 0x2438 <Timer1_pwmAdjust+0x58>
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	9c 83       	std	Y+4, r25	; 0x04
    2444:	8b 83       	std	Y+3, r24	; 0x03
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	8d 83       	std	Y+5, r24	; 0x05
    244a:	8f e0       	ldi	r24, 0x0F	; 15
    244c:	8e 83       	std	Y+6, r24	; 0x06
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	8f 83       	std	Y+7, r24	; 0x07
	Timer1_init(&ConfigPTR);
    2452:	ce 01       	movw	r24, r28
    2454:	01 96       	adiw	r24, 0x01	; 1
    2456:	0e 94 e5 10 	call	0x21ca	; 0x21ca <Timer1_init>
}
    245a:	2a 96       	adiw	r28, 0x0a	; 10
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <__mulsi3>:
    246c:	62 9f       	mul	r22, r18
    246e:	d0 01       	movw	r26, r0
    2470:	73 9f       	mul	r23, r19
    2472:	f0 01       	movw	r30, r0
    2474:	82 9f       	mul	r24, r18
    2476:	e0 0d       	add	r30, r0
    2478:	f1 1d       	adc	r31, r1
    247a:	64 9f       	mul	r22, r20
    247c:	e0 0d       	add	r30, r0
    247e:	f1 1d       	adc	r31, r1
    2480:	92 9f       	mul	r25, r18
    2482:	f0 0d       	add	r31, r0
    2484:	83 9f       	mul	r24, r19
    2486:	f0 0d       	add	r31, r0
    2488:	74 9f       	mul	r23, r20
    248a:	f0 0d       	add	r31, r0
    248c:	65 9f       	mul	r22, r21
    248e:	f0 0d       	add	r31, r0
    2490:	99 27       	eor	r25, r25
    2492:	72 9f       	mul	r23, r18
    2494:	b0 0d       	add	r27, r0
    2496:	e1 1d       	adc	r30, r1
    2498:	f9 1f       	adc	r31, r25
    249a:	63 9f       	mul	r22, r19
    249c:	b0 0d       	add	r27, r0
    249e:	e1 1d       	adc	r30, r1
    24a0:	f9 1f       	adc	r31, r25
    24a2:	bd 01       	movw	r22, r26
    24a4:	cf 01       	movw	r24, r30
    24a6:	11 24       	eor	r1, r1
    24a8:	08 95       	ret

000024aa <__udivmodhi4>:
    24aa:	aa 1b       	sub	r26, r26
    24ac:	bb 1b       	sub	r27, r27
    24ae:	51 e1       	ldi	r21, 0x11	; 17
    24b0:	07 c0       	rjmp	.+14     	; 0x24c0 <__udivmodhi4_ep>

000024b2 <__udivmodhi4_loop>:
    24b2:	aa 1f       	adc	r26, r26
    24b4:	bb 1f       	adc	r27, r27
    24b6:	a6 17       	cp	r26, r22
    24b8:	b7 07       	cpc	r27, r23
    24ba:	10 f0       	brcs	.+4      	; 0x24c0 <__udivmodhi4_ep>
    24bc:	a6 1b       	sub	r26, r22
    24be:	b7 0b       	sbc	r27, r23

000024c0 <__udivmodhi4_ep>:
    24c0:	88 1f       	adc	r24, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	5a 95       	dec	r21
    24c6:	a9 f7       	brne	.-22     	; 0x24b2 <__udivmodhi4_loop>
    24c8:	80 95       	com	r24
    24ca:	90 95       	com	r25
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	08 95       	ret

000024d2 <__udivmodsi4>:
    24d2:	a1 e2       	ldi	r26, 0x21	; 33
    24d4:	1a 2e       	mov	r1, r26
    24d6:	aa 1b       	sub	r26, r26
    24d8:	bb 1b       	sub	r27, r27
    24da:	fd 01       	movw	r30, r26
    24dc:	0d c0       	rjmp	.+26     	; 0x24f8 <__udivmodsi4_ep>

000024de <__udivmodsi4_loop>:
    24de:	aa 1f       	adc	r26, r26
    24e0:	bb 1f       	adc	r27, r27
    24e2:	ee 1f       	adc	r30, r30
    24e4:	ff 1f       	adc	r31, r31
    24e6:	a2 17       	cp	r26, r18
    24e8:	b3 07       	cpc	r27, r19
    24ea:	e4 07       	cpc	r30, r20
    24ec:	f5 07       	cpc	r31, r21
    24ee:	20 f0       	brcs	.+8      	; 0x24f8 <__udivmodsi4_ep>
    24f0:	a2 1b       	sub	r26, r18
    24f2:	b3 0b       	sbc	r27, r19
    24f4:	e4 0b       	sbc	r30, r20
    24f6:	f5 0b       	sbc	r31, r21

000024f8 <__udivmodsi4_ep>:
    24f8:	66 1f       	adc	r22, r22
    24fa:	77 1f       	adc	r23, r23
    24fc:	88 1f       	adc	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	1a 94       	dec	r1
    2502:	69 f7       	brne	.-38     	; 0x24de <__udivmodsi4_loop>
    2504:	60 95       	com	r22
    2506:	70 95       	com	r23
    2508:	80 95       	com	r24
    250a:	90 95       	com	r25
    250c:	9b 01       	movw	r18, r22
    250e:	ac 01       	movw	r20, r24
    2510:	bd 01       	movw	r22, r26
    2512:	cf 01       	movw	r24, r30
    2514:	08 95       	ret

00002516 <__prologue_saves__>:
    2516:	2f 92       	push	r2
    2518:	3f 92       	push	r3
    251a:	4f 92       	push	r4
    251c:	5f 92       	push	r5
    251e:	6f 92       	push	r6
    2520:	7f 92       	push	r7
    2522:	8f 92       	push	r8
    2524:	9f 92       	push	r9
    2526:	af 92       	push	r10
    2528:	bf 92       	push	r11
    252a:	cf 92       	push	r12
    252c:	df 92       	push	r13
    252e:	ef 92       	push	r14
    2530:	ff 92       	push	r15
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	ca 1b       	sub	r28, r26
    2540:	db 0b       	sbc	r29, r27
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	cd bf       	out	0x3d, r28	; 61
    254c:	09 94       	ijmp

0000254e <__epilogue_restores__>:
    254e:	2a 88       	ldd	r2, Y+18	; 0x12
    2550:	39 88       	ldd	r3, Y+17	; 0x11
    2552:	48 88       	ldd	r4, Y+16	; 0x10
    2554:	5f 84       	ldd	r5, Y+15	; 0x0f
    2556:	6e 84       	ldd	r6, Y+14	; 0x0e
    2558:	7d 84       	ldd	r7, Y+13	; 0x0d
    255a:	8c 84       	ldd	r8, Y+12	; 0x0c
    255c:	9b 84       	ldd	r9, Y+11	; 0x0b
    255e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2560:	b9 84       	ldd	r11, Y+9	; 0x09
    2562:	c8 84       	ldd	r12, Y+8	; 0x08
    2564:	df 80       	ldd	r13, Y+7	; 0x07
    2566:	ee 80       	ldd	r14, Y+6	; 0x06
    2568:	fd 80       	ldd	r15, Y+5	; 0x05
    256a:	0c 81       	ldd	r16, Y+4	; 0x04
    256c:	1b 81       	ldd	r17, Y+3	; 0x03
    256e:	aa 81       	ldd	r26, Y+2	; 0x02
    2570:	b9 81       	ldd	r27, Y+1	; 0x01
    2572:	ce 0f       	add	r28, r30
    2574:	d1 1d       	adc	r29, r1
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	ed 01       	movw	r28, r26
    2582:	08 95       	ret

00002584 <printf>:
    2584:	a0 e0       	ldi	r26, 0x00	; 0
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e8 ec       	ldi	r30, 0xC8	; 200
    258a:	f2 e1       	ldi	r31, 0x12	; 18
    258c:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__prologue_saves__+0x20>
    2590:	fe 01       	movw	r30, r28
    2592:	35 96       	adiw	r30, 0x05	; 5
    2594:	61 91       	ld	r22, Z+
    2596:	71 91       	ld	r23, Z+
    2598:	80 91 86 02 	lds	r24, 0x0286
    259c:	90 91 87 02 	lds	r25, 0x0287
    25a0:	af 01       	movw	r20, r30
    25a2:	0e 94 0c 13 	call	0x2618	; 0x2618 <vfprintf>
    25a6:	20 96       	adiw	r28, 0x00	; 0
    25a8:	e2 e0       	ldi	r30, 0x02	; 2
    25aa:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__epilogue_restores__+0x20>

000025ae <puts>:
    25ae:	0f 93       	push	r16
    25b0:	1f 93       	push	r17
    25b2:	cf 93       	push	r28
    25b4:	df 93       	push	r29
    25b6:	8c 01       	movw	r16, r24
    25b8:	e0 91 86 02 	lds	r30, 0x0286
    25bc:	f0 91 87 02 	lds	r31, 0x0287
    25c0:	83 81       	ldd	r24, Z+3	; 0x03
    25c2:	81 ff       	sbrs	r24, 1
    25c4:	21 c0       	rjmp	.+66     	; 0x2608 <puts+0x5a>
    25c6:	c0 e0       	ldi	r28, 0x00	; 0
    25c8:	d0 e0       	ldi	r29, 0x00	; 0
    25ca:	0d c0       	rjmp	.+26     	; 0x25e6 <puts+0x38>
    25cc:	e0 91 86 02 	lds	r30, 0x0286
    25d0:	f0 91 87 02 	lds	r31, 0x0287
    25d4:	20 85       	ldd	r18, Z+8	; 0x08
    25d6:	31 85       	ldd	r19, Z+9	; 0x09
    25d8:	bf 01       	movw	r22, r30
    25da:	f9 01       	movw	r30, r18
    25dc:	09 95       	icall
    25de:	89 2b       	or	r24, r25
    25e0:	11 f0       	breq	.+4      	; 0x25e6 <puts+0x38>
    25e2:	cf ef       	ldi	r28, 0xFF	; 255
    25e4:	df ef       	ldi	r29, 0xFF	; 255
    25e6:	f8 01       	movw	r30, r16
    25e8:	81 91       	ld	r24, Z+
    25ea:	8f 01       	movw	r16, r30
    25ec:	88 23       	and	r24, r24
    25ee:	71 f7       	brne	.-36     	; 0x25cc <puts+0x1e>
    25f0:	e0 91 86 02 	lds	r30, 0x0286
    25f4:	f0 91 87 02 	lds	r31, 0x0287
    25f8:	20 85       	ldd	r18, Z+8	; 0x08
    25fa:	31 85       	ldd	r19, Z+9	; 0x09
    25fc:	8a e0       	ldi	r24, 0x0A	; 10
    25fe:	bf 01       	movw	r22, r30
    2600:	f9 01       	movw	r30, r18
    2602:	09 95       	icall
    2604:	89 2b       	or	r24, r25
    2606:	11 f0       	breq	.+4      	; 0x260c <puts+0x5e>
    2608:	cf ef       	ldi	r28, 0xFF	; 255
    260a:	df ef       	ldi	r29, 0xFF	; 255
    260c:	ce 01       	movw	r24, r28
    260e:	df 91       	pop	r29
    2610:	cf 91       	pop	r28
    2612:	1f 91       	pop	r17
    2614:	0f 91       	pop	r16
    2616:	08 95       	ret

00002618 <vfprintf>:
    2618:	ab e0       	ldi	r26, 0x0B	; 11
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e2 e1       	ldi	r30, 0x12	; 18
    261e:	f3 e1       	ldi	r31, 0x13	; 19
    2620:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__prologue_saves__>
    2624:	3c 01       	movw	r6, r24
    2626:	2b 01       	movw	r4, r22
    2628:	5a 01       	movw	r10, r20
    262a:	fc 01       	movw	r30, r24
    262c:	17 82       	std	Z+7, r1	; 0x07
    262e:	16 82       	std	Z+6, r1	; 0x06
    2630:	83 81       	ldd	r24, Z+3	; 0x03
    2632:	81 fd       	sbrc	r24, 1
    2634:	03 c0       	rjmp	.+6      	; 0x263c <vfprintf+0x24>
    2636:	6f ef       	ldi	r22, 0xFF	; 255
    2638:	7f ef       	ldi	r23, 0xFF	; 255
    263a:	c6 c1       	rjmp	.+908    	; 0x29c8 <vfprintf+0x3b0>
    263c:	9a e0       	ldi	r25, 0x0A	; 10
    263e:	89 2e       	mov	r8, r25
    2640:	1e 01       	movw	r2, r28
    2642:	08 94       	sec
    2644:	21 1c       	adc	r2, r1
    2646:	31 1c       	adc	r3, r1
    2648:	f3 01       	movw	r30, r6
    264a:	23 81       	ldd	r18, Z+3	; 0x03
    264c:	f2 01       	movw	r30, r4
    264e:	23 fd       	sbrc	r18, 3
    2650:	85 91       	lpm	r24, Z+
    2652:	23 ff       	sbrs	r18, 3
    2654:	81 91       	ld	r24, Z+
    2656:	2f 01       	movw	r4, r30
    2658:	88 23       	and	r24, r24
    265a:	09 f4       	brne	.+2      	; 0x265e <vfprintf+0x46>
    265c:	b2 c1       	rjmp	.+868    	; 0x29c2 <vfprintf+0x3aa>
    265e:	85 32       	cpi	r24, 0x25	; 37
    2660:	39 f4       	brne	.+14     	; 0x2670 <vfprintf+0x58>
    2662:	23 fd       	sbrc	r18, 3
    2664:	85 91       	lpm	r24, Z+
    2666:	23 ff       	sbrs	r18, 3
    2668:	81 91       	ld	r24, Z+
    266a:	2f 01       	movw	r4, r30
    266c:	85 32       	cpi	r24, 0x25	; 37
    266e:	29 f4       	brne	.+10     	; 0x267a <vfprintf+0x62>
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	b3 01       	movw	r22, r6
    2674:	0e 94 ff 14 	call	0x29fe	; 0x29fe <fputc>
    2678:	e7 cf       	rjmp	.-50     	; 0x2648 <vfprintf+0x30>
    267a:	98 2f       	mov	r25, r24
    267c:	ff 24       	eor	r15, r15
    267e:	ee 24       	eor	r14, r14
    2680:	99 24       	eor	r9, r9
    2682:	ff e1       	ldi	r31, 0x1F	; 31
    2684:	ff 15       	cp	r31, r15
    2686:	d0 f0       	brcs	.+52     	; 0x26bc <vfprintf+0xa4>
    2688:	9b 32       	cpi	r25, 0x2B	; 43
    268a:	69 f0       	breq	.+26     	; 0x26a6 <vfprintf+0x8e>
    268c:	9c 32       	cpi	r25, 0x2C	; 44
    268e:	28 f4       	brcc	.+10     	; 0x269a <vfprintf+0x82>
    2690:	90 32       	cpi	r25, 0x20	; 32
    2692:	59 f0       	breq	.+22     	; 0x26aa <vfprintf+0x92>
    2694:	93 32       	cpi	r25, 0x23	; 35
    2696:	91 f4       	brne	.+36     	; 0x26bc <vfprintf+0xa4>
    2698:	0e c0       	rjmp	.+28     	; 0x26b6 <vfprintf+0x9e>
    269a:	9d 32       	cpi	r25, 0x2D	; 45
    269c:	49 f0       	breq	.+18     	; 0x26b0 <vfprintf+0x98>
    269e:	90 33       	cpi	r25, 0x30	; 48
    26a0:	69 f4       	brne	.+26     	; 0x26bc <vfprintf+0xa4>
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	24 c0       	rjmp	.+72     	; 0x26ee <vfprintf+0xd6>
    26a6:	52 e0       	ldi	r21, 0x02	; 2
    26a8:	f5 2a       	or	r15, r21
    26aa:	84 e0       	ldi	r24, 0x04	; 4
    26ac:	f8 2a       	or	r15, r24
    26ae:	28 c0       	rjmp	.+80     	; 0x2700 <vfprintf+0xe8>
    26b0:	98 e0       	ldi	r25, 0x08	; 8
    26b2:	f9 2a       	or	r15, r25
    26b4:	25 c0       	rjmp	.+74     	; 0x2700 <vfprintf+0xe8>
    26b6:	e0 e1       	ldi	r30, 0x10	; 16
    26b8:	fe 2a       	or	r15, r30
    26ba:	22 c0       	rjmp	.+68     	; 0x2700 <vfprintf+0xe8>
    26bc:	f7 fc       	sbrc	r15, 7
    26be:	29 c0       	rjmp	.+82     	; 0x2712 <vfprintf+0xfa>
    26c0:	89 2f       	mov	r24, r25
    26c2:	80 53       	subi	r24, 0x30	; 48
    26c4:	8a 30       	cpi	r24, 0x0A	; 10
    26c6:	70 f4       	brcc	.+28     	; 0x26e4 <vfprintf+0xcc>
    26c8:	f6 fe       	sbrs	r15, 6
    26ca:	05 c0       	rjmp	.+10     	; 0x26d6 <vfprintf+0xbe>
    26cc:	98 9c       	mul	r9, r8
    26ce:	90 2c       	mov	r9, r0
    26d0:	11 24       	eor	r1, r1
    26d2:	98 0e       	add	r9, r24
    26d4:	15 c0       	rjmp	.+42     	; 0x2700 <vfprintf+0xe8>
    26d6:	e8 9c       	mul	r14, r8
    26d8:	e0 2c       	mov	r14, r0
    26da:	11 24       	eor	r1, r1
    26dc:	e8 0e       	add	r14, r24
    26de:	f0 e2       	ldi	r31, 0x20	; 32
    26e0:	ff 2a       	or	r15, r31
    26e2:	0e c0       	rjmp	.+28     	; 0x2700 <vfprintf+0xe8>
    26e4:	9e 32       	cpi	r25, 0x2E	; 46
    26e6:	29 f4       	brne	.+10     	; 0x26f2 <vfprintf+0xda>
    26e8:	f6 fc       	sbrc	r15, 6
    26ea:	6b c1       	rjmp	.+726    	; 0x29c2 <vfprintf+0x3aa>
    26ec:	40 e4       	ldi	r20, 0x40	; 64
    26ee:	f4 2a       	or	r15, r20
    26f0:	07 c0       	rjmp	.+14     	; 0x2700 <vfprintf+0xe8>
    26f2:	9c 36       	cpi	r25, 0x6C	; 108
    26f4:	19 f4       	brne	.+6      	; 0x26fc <vfprintf+0xe4>
    26f6:	50 e8       	ldi	r21, 0x80	; 128
    26f8:	f5 2a       	or	r15, r21
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <vfprintf+0xe8>
    26fc:	98 36       	cpi	r25, 0x68	; 104
    26fe:	49 f4       	brne	.+18     	; 0x2712 <vfprintf+0xfa>
    2700:	f2 01       	movw	r30, r4
    2702:	23 fd       	sbrc	r18, 3
    2704:	95 91       	lpm	r25, Z+
    2706:	23 ff       	sbrs	r18, 3
    2708:	91 91       	ld	r25, Z+
    270a:	2f 01       	movw	r4, r30
    270c:	99 23       	and	r25, r25
    270e:	09 f0       	breq	.+2      	; 0x2712 <vfprintf+0xfa>
    2710:	b8 cf       	rjmp	.-144    	; 0x2682 <vfprintf+0x6a>
    2712:	89 2f       	mov	r24, r25
    2714:	85 54       	subi	r24, 0x45	; 69
    2716:	83 30       	cpi	r24, 0x03	; 3
    2718:	18 f0       	brcs	.+6      	; 0x2720 <vfprintf+0x108>
    271a:	80 52       	subi	r24, 0x20	; 32
    271c:	83 30       	cpi	r24, 0x03	; 3
    271e:	38 f4       	brcc	.+14     	; 0x272e <vfprintf+0x116>
    2720:	44 e0       	ldi	r20, 0x04	; 4
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	a4 0e       	add	r10, r20
    2726:	b5 1e       	adc	r11, r21
    2728:	5f e3       	ldi	r21, 0x3F	; 63
    272a:	59 83       	std	Y+1, r21	; 0x01
    272c:	0f c0       	rjmp	.+30     	; 0x274c <vfprintf+0x134>
    272e:	93 36       	cpi	r25, 0x63	; 99
    2730:	31 f0       	breq	.+12     	; 0x273e <vfprintf+0x126>
    2732:	93 37       	cpi	r25, 0x73	; 115
    2734:	79 f0       	breq	.+30     	; 0x2754 <vfprintf+0x13c>
    2736:	93 35       	cpi	r25, 0x53	; 83
    2738:	09 f0       	breq	.+2      	; 0x273c <vfprintf+0x124>
    273a:	56 c0       	rjmp	.+172    	; 0x27e8 <vfprintf+0x1d0>
    273c:	20 c0       	rjmp	.+64     	; 0x277e <vfprintf+0x166>
    273e:	f5 01       	movw	r30, r10
    2740:	80 81       	ld	r24, Z
    2742:	89 83       	std	Y+1, r24	; 0x01
    2744:	42 e0       	ldi	r20, 0x02	; 2
    2746:	50 e0       	ldi	r21, 0x00	; 0
    2748:	a4 0e       	add	r10, r20
    274a:	b5 1e       	adc	r11, r21
    274c:	61 01       	movw	r12, r2
    274e:	01 e0       	ldi	r16, 0x01	; 1
    2750:	10 e0       	ldi	r17, 0x00	; 0
    2752:	12 c0       	rjmp	.+36     	; 0x2778 <vfprintf+0x160>
    2754:	f5 01       	movw	r30, r10
    2756:	c0 80       	ld	r12, Z
    2758:	d1 80       	ldd	r13, Z+1	; 0x01
    275a:	f6 fc       	sbrc	r15, 6
    275c:	03 c0       	rjmp	.+6      	; 0x2764 <vfprintf+0x14c>
    275e:	6f ef       	ldi	r22, 0xFF	; 255
    2760:	7f ef       	ldi	r23, 0xFF	; 255
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <vfprintf+0x150>
    2764:	69 2d       	mov	r22, r9
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	42 e0       	ldi	r20, 0x02	; 2
    276a:	50 e0       	ldi	r21, 0x00	; 0
    276c:	a4 0e       	add	r10, r20
    276e:	b5 1e       	adc	r11, r21
    2770:	c6 01       	movw	r24, r12
    2772:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <strnlen>
    2776:	8c 01       	movw	r16, r24
    2778:	5f e7       	ldi	r21, 0x7F	; 127
    277a:	f5 22       	and	r15, r21
    277c:	14 c0       	rjmp	.+40     	; 0x27a6 <vfprintf+0x18e>
    277e:	f5 01       	movw	r30, r10
    2780:	c0 80       	ld	r12, Z
    2782:	d1 80       	ldd	r13, Z+1	; 0x01
    2784:	f6 fc       	sbrc	r15, 6
    2786:	03 c0       	rjmp	.+6      	; 0x278e <vfprintf+0x176>
    2788:	6f ef       	ldi	r22, 0xFF	; 255
    278a:	7f ef       	ldi	r23, 0xFF	; 255
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <vfprintf+0x17a>
    278e:	69 2d       	mov	r22, r9
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	42 e0       	ldi	r20, 0x02	; 2
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	a4 0e       	add	r10, r20
    2798:	b5 1e       	adc	r11, r21
    279a:	c6 01       	movw	r24, r12
    279c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <strnlen_P>
    27a0:	8c 01       	movw	r16, r24
    27a2:	50 e8       	ldi	r21, 0x80	; 128
    27a4:	f5 2a       	or	r15, r21
    27a6:	f3 fe       	sbrs	r15, 3
    27a8:	07 c0       	rjmp	.+14     	; 0x27b8 <vfprintf+0x1a0>
    27aa:	1a c0       	rjmp	.+52     	; 0x27e0 <vfprintf+0x1c8>
    27ac:	80 e2       	ldi	r24, 0x20	; 32
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	b3 01       	movw	r22, r6
    27b2:	0e 94 ff 14 	call	0x29fe	; 0x29fe <fputc>
    27b6:	ea 94       	dec	r14
    27b8:	8e 2d       	mov	r24, r14
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	08 17       	cp	r16, r24
    27be:	19 07       	cpc	r17, r25
    27c0:	a8 f3       	brcs	.-22     	; 0x27ac <vfprintf+0x194>
    27c2:	0e c0       	rjmp	.+28     	; 0x27e0 <vfprintf+0x1c8>
    27c4:	f6 01       	movw	r30, r12
    27c6:	f7 fc       	sbrc	r15, 7
    27c8:	85 91       	lpm	r24, Z+
    27ca:	f7 fe       	sbrs	r15, 7
    27cc:	81 91       	ld	r24, Z+
    27ce:	6f 01       	movw	r12, r30
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	b3 01       	movw	r22, r6
    27d4:	0e 94 ff 14 	call	0x29fe	; 0x29fe <fputc>
    27d8:	e1 10       	cpse	r14, r1
    27da:	ea 94       	dec	r14
    27dc:	01 50       	subi	r16, 0x01	; 1
    27de:	10 40       	sbci	r17, 0x00	; 0
    27e0:	01 15       	cp	r16, r1
    27e2:	11 05       	cpc	r17, r1
    27e4:	79 f7       	brne	.-34     	; 0x27c4 <vfprintf+0x1ac>
    27e6:	ea c0       	rjmp	.+468    	; 0x29bc <vfprintf+0x3a4>
    27e8:	94 36       	cpi	r25, 0x64	; 100
    27ea:	11 f0       	breq	.+4      	; 0x27f0 <vfprintf+0x1d8>
    27ec:	99 36       	cpi	r25, 0x69	; 105
    27ee:	69 f5       	brne	.+90     	; 0x284a <vfprintf+0x232>
    27f0:	f7 fe       	sbrs	r15, 7
    27f2:	08 c0       	rjmp	.+16     	; 0x2804 <vfprintf+0x1ec>
    27f4:	f5 01       	movw	r30, r10
    27f6:	20 81       	ld	r18, Z
    27f8:	31 81       	ldd	r19, Z+1	; 0x01
    27fa:	42 81       	ldd	r20, Z+2	; 0x02
    27fc:	53 81       	ldd	r21, Z+3	; 0x03
    27fe:	84 e0       	ldi	r24, 0x04	; 4
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0a c0       	rjmp	.+20     	; 0x2818 <vfprintf+0x200>
    2804:	f5 01       	movw	r30, r10
    2806:	80 81       	ld	r24, Z
    2808:	91 81       	ldd	r25, Z+1	; 0x01
    280a:	9c 01       	movw	r18, r24
    280c:	44 27       	eor	r20, r20
    280e:	37 fd       	sbrc	r19, 7
    2810:	40 95       	com	r20
    2812:	54 2f       	mov	r21, r20
    2814:	82 e0       	ldi	r24, 0x02	; 2
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a8 0e       	add	r10, r24
    281a:	b9 1e       	adc	r11, r25
    281c:	9f e6       	ldi	r25, 0x6F	; 111
    281e:	f9 22       	and	r15, r25
    2820:	57 ff       	sbrs	r21, 7
    2822:	09 c0       	rjmp	.+18     	; 0x2836 <vfprintf+0x21e>
    2824:	50 95       	com	r21
    2826:	40 95       	com	r20
    2828:	30 95       	com	r19
    282a:	21 95       	neg	r18
    282c:	3f 4f       	sbci	r19, 0xFF	; 255
    282e:	4f 4f       	sbci	r20, 0xFF	; 255
    2830:	5f 4f       	sbci	r21, 0xFF	; 255
    2832:	e0 e8       	ldi	r30, 0x80	; 128
    2834:	fe 2a       	or	r15, r30
    2836:	ca 01       	movw	r24, r20
    2838:	b9 01       	movw	r22, r18
    283a:	a1 01       	movw	r20, r2
    283c:	2a e0       	ldi	r18, 0x0A	; 10
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__ultoa_invert>
    2844:	d8 2e       	mov	r13, r24
    2846:	d2 18       	sub	r13, r2
    2848:	40 c0       	rjmp	.+128    	; 0x28ca <vfprintf+0x2b2>
    284a:	95 37       	cpi	r25, 0x75	; 117
    284c:	29 f4       	brne	.+10     	; 0x2858 <vfprintf+0x240>
    284e:	1f 2d       	mov	r17, r15
    2850:	1f 7e       	andi	r17, 0xEF	; 239
    2852:	2a e0       	ldi	r18, 0x0A	; 10
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	1d c0       	rjmp	.+58     	; 0x2892 <vfprintf+0x27a>
    2858:	1f 2d       	mov	r17, r15
    285a:	19 7f       	andi	r17, 0xF9	; 249
    285c:	9f 36       	cpi	r25, 0x6F	; 111
    285e:	61 f0       	breq	.+24     	; 0x2878 <vfprintf+0x260>
    2860:	90 37       	cpi	r25, 0x70	; 112
    2862:	20 f4       	brcc	.+8      	; 0x286c <vfprintf+0x254>
    2864:	98 35       	cpi	r25, 0x58	; 88
    2866:	09 f0       	breq	.+2      	; 0x286a <vfprintf+0x252>
    2868:	ac c0       	rjmp	.+344    	; 0x29c2 <vfprintf+0x3aa>
    286a:	0f c0       	rjmp	.+30     	; 0x288a <vfprintf+0x272>
    286c:	90 37       	cpi	r25, 0x70	; 112
    286e:	39 f0       	breq	.+14     	; 0x287e <vfprintf+0x266>
    2870:	98 37       	cpi	r25, 0x78	; 120
    2872:	09 f0       	breq	.+2      	; 0x2876 <vfprintf+0x25e>
    2874:	a6 c0       	rjmp	.+332    	; 0x29c2 <vfprintf+0x3aa>
    2876:	04 c0       	rjmp	.+8      	; 0x2880 <vfprintf+0x268>
    2878:	28 e0       	ldi	r18, 0x08	; 8
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	0a c0       	rjmp	.+20     	; 0x2892 <vfprintf+0x27a>
    287e:	10 61       	ori	r17, 0x10	; 16
    2880:	14 fd       	sbrc	r17, 4
    2882:	14 60       	ori	r17, 0x04	; 4
    2884:	20 e1       	ldi	r18, 0x10	; 16
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	04 c0       	rjmp	.+8      	; 0x2892 <vfprintf+0x27a>
    288a:	14 fd       	sbrc	r17, 4
    288c:	16 60       	ori	r17, 0x06	; 6
    288e:	20 e1       	ldi	r18, 0x10	; 16
    2890:	32 e0       	ldi	r19, 0x02	; 2
    2892:	17 ff       	sbrs	r17, 7
    2894:	08 c0       	rjmp	.+16     	; 0x28a6 <vfprintf+0x28e>
    2896:	f5 01       	movw	r30, r10
    2898:	60 81       	ld	r22, Z
    289a:	71 81       	ldd	r23, Z+1	; 0x01
    289c:	82 81       	ldd	r24, Z+2	; 0x02
    289e:	93 81       	ldd	r25, Z+3	; 0x03
    28a0:	44 e0       	ldi	r20, 0x04	; 4
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	08 c0       	rjmp	.+16     	; 0x28b6 <vfprintf+0x29e>
    28a6:	f5 01       	movw	r30, r10
    28a8:	80 81       	ld	r24, Z
    28aa:	91 81       	ldd	r25, Z+1	; 0x01
    28ac:	bc 01       	movw	r22, r24
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	42 e0       	ldi	r20, 0x02	; 2
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	a4 0e       	add	r10, r20
    28b8:	b5 1e       	adc	r11, r21
    28ba:	a1 01       	movw	r20, r2
    28bc:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__ultoa_invert>
    28c0:	d8 2e       	mov	r13, r24
    28c2:	d2 18       	sub	r13, r2
    28c4:	8f e7       	ldi	r24, 0x7F	; 127
    28c6:	f8 2e       	mov	r15, r24
    28c8:	f1 22       	and	r15, r17
    28ca:	f6 fe       	sbrs	r15, 6
    28cc:	0b c0       	rjmp	.+22     	; 0x28e4 <vfprintf+0x2cc>
    28ce:	5e ef       	ldi	r21, 0xFE	; 254
    28d0:	f5 22       	and	r15, r21
    28d2:	d9 14       	cp	r13, r9
    28d4:	38 f4       	brcc	.+14     	; 0x28e4 <vfprintf+0x2cc>
    28d6:	f4 fe       	sbrs	r15, 4
    28d8:	07 c0       	rjmp	.+14     	; 0x28e8 <vfprintf+0x2d0>
    28da:	f2 fc       	sbrc	r15, 2
    28dc:	05 c0       	rjmp	.+10     	; 0x28e8 <vfprintf+0x2d0>
    28de:	8f ee       	ldi	r24, 0xEF	; 239
    28e0:	f8 22       	and	r15, r24
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <vfprintf+0x2d0>
    28e4:	1d 2d       	mov	r17, r13
    28e6:	01 c0       	rjmp	.+2      	; 0x28ea <vfprintf+0x2d2>
    28e8:	19 2d       	mov	r17, r9
    28ea:	f4 fe       	sbrs	r15, 4
    28ec:	0d c0       	rjmp	.+26     	; 0x2908 <vfprintf+0x2f0>
    28ee:	fe 01       	movw	r30, r28
    28f0:	ed 0d       	add	r30, r13
    28f2:	f1 1d       	adc	r31, r1
    28f4:	80 81       	ld	r24, Z
    28f6:	80 33       	cpi	r24, 0x30	; 48
    28f8:	19 f4       	brne	.+6      	; 0x2900 <vfprintf+0x2e8>
    28fa:	99 ee       	ldi	r25, 0xE9	; 233
    28fc:	f9 22       	and	r15, r25
    28fe:	08 c0       	rjmp	.+16     	; 0x2910 <vfprintf+0x2f8>
    2900:	1f 5f       	subi	r17, 0xFF	; 255
    2902:	f2 fe       	sbrs	r15, 2
    2904:	05 c0       	rjmp	.+10     	; 0x2910 <vfprintf+0x2f8>
    2906:	03 c0       	rjmp	.+6      	; 0x290e <vfprintf+0x2f6>
    2908:	8f 2d       	mov	r24, r15
    290a:	86 78       	andi	r24, 0x86	; 134
    290c:	09 f0       	breq	.+2      	; 0x2910 <vfprintf+0x2f8>
    290e:	1f 5f       	subi	r17, 0xFF	; 255
    2910:	0f 2d       	mov	r16, r15
    2912:	f3 fc       	sbrc	r15, 3
    2914:	14 c0       	rjmp	.+40     	; 0x293e <vfprintf+0x326>
    2916:	f0 fe       	sbrs	r15, 0
    2918:	0f c0       	rjmp	.+30     	; 0x2938 <vfprintf+0x320>
    291a:	1e 15       	cp	r17, r14
    291c:	10 f0       	brcs	.+4      	; 0x2922 <vfprintf+0x30a>
    291e:	9d 2c       	mov	r9, r13
    2920:	0b c0       	rjmp	.+22     	; 0x2938 <vfprintf+0x320>
    2922:	9d 2c       	mov	r9, r13
    2924:	9e 0c       	add	r9, r14
    2926:	91 1a       	sub	r9, r17
    2928:	1e 2d       	mov	r17, r14
    292a:	06 c0       	rjmp	.+12     	; 0x2938 <vfprintf+0x320>
    292c:	80 e2       	ldi	r24, 0x20	; 32
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	b3 01       	movw	r22, r6
    2932:	0e 94 ff 14 	call	0x29fe	; 0x29fe <fputc>
    2936:	1f 5f       	subi	r17, 0xFF	; 255
    2938:	1e 15       	cp	r17, r14
    293a:	c0 f3       	brcs	.-16     	; 0x292c <vfprintf+0x314>
    293c:	04 c0       	rjmp	.+8      	; 0x2946 <vfprintf+0x32e>
    293e:	1e 15       	cp	r17, r14
    2940:	10 f4       	brcc	.+4      	; 0x2946 <vfprintf+0x32e>
    2942:	e1 1a       	sub	r14, r17
    2944:	01 c0       	rjmp	.+2      	; 0x2948 <vfprintf+0x330>
    2946:	ee 24       	eor	r14, r14
    2948:	04 ff       	sbrs	r16, 4
    294a:	0f c0       	rjmp	.+30     	; 0x296a <vfprintf+0x352>
    294c:	80 e3       	ldi	r24, 0x30	; 48
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	b3 01       	movw	r22, r6
    2952:	0e 94 ff 14 	call	0x29fe	; 0x29fe <fputc>
    2956:	02 ff       	sbrs	r16, 2
    2958:	1d c0       	rjmp	.+58     	; 0x2994 <vfprintf+0x37c>
    295a:	01 fd       	sbrc	r16, 1
    295c:	03 c0       	rjmp	.+6      	; 0x2964 <vfprintf+0x34c>
    295e:	88 e7       	ldi	r24, 0x78	; 120
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	0e c0       	rjmp	.+28     	; 0x2980 <vfprintf+0x368>
    2964:	88 e5       	ldi	r24, 0x58	; 88
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	0b c0       	rjmp	.+22     	; 0x2980 <vfprintf+0x368>
    296a:	80 2f       	mov	r24, r16
    296c:	86 78       	andi	r24, 0x86	; 134
    296e:	91 f0       	breq	.+36     	; 0x2994 <vfprintf+0x37c>
    2970:	01 ff       	sbrs	r16, 1
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <vfprintf+0x360>
    2974:	8b e2       	ldi	r24, 0x2B	; 43
    2976:	01 c0       	rjmp	.+2      	; 0x297a <vfprintf+0x362>
    2978:	80 e2       	ldi	r24, 0x20	; 32
    297a:	f7 fc       	sbrc	r15, 7
    297c:	8d e2       	ldi	r24, 0x2D	; 45
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	b3 01       	movw	r22, r6
    2982:	0e 94 ff 14 	call	0x29fe	; 0x29fe <fputc>
    2986:	06 c0       	rjmp	.+12     	; 0x2994 <vfprintf+0x37c>
    2988:	80 e3       	ldi	r24, 0x30	; 48
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	b3 01       	movw	r22, r6
    298e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <fputc>
    2992:	9a 94       	dec	r9
    2994:	d9 14       	cp	r13, r9
    2996:	c0 f3       	brcs	.-16     	; 0x2988 <vfprintf+0x370>
    2998:	da 94       	dec	r13
    299a:	f1 01       	movw	r30, r2
    299c:	ed 0d       	add	r30, r13
    299e:	f1 1d       	adc	r31, r1
    29a0:	80 81       	ld	r24, Z
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	b3 01       	movw	r22, r6
    29a6:	0e 94 ff 14 	call	0x29fe	; 0x29fe <fputc>
    29aa:	dd 20       	and	r13, r13
    29ac:	a9 f7       	brne	.-22     	; 0x2998 <vfprintf+0x380>
    29ae:	06 c0       	rjmp	.+12     	; 0x29bc <vfprintf+0x3a4>
    29b0:	80 e2       	ldi	r24, 0x20	; 32
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	b3 01       	movw	r22, r6
    29b6:	0e 94 ff 14 	call	0x29fe	; 0x29fe <fputc>
    29ba:	ea 94       	dec	r14
    29bc:	ee 20       	and	r14, r14
    29be:	c1 f7       	brne	.-16     	; 0x29b0 <vfprintf+0x398>
    29c0:	43 ce       	rjmp	.-890    	; 0x2648 <vfprintf+0x30>
    29c2:	f3 01       	movw	r30, r6
    29c4:	66 81       	ldd	r22, Z+6	; 0x06
    29c6:	77 81       	ldd	r23, Z+7	; 0x07
    29c8:	cb 01       	movw	r24, r22
    29ca:	2b 96       	adiw	r28, 0x0b	; 11
    29cc:	e2 e1       	ldi	r30, 0x12	; 18
    29ce:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__epilogue_restores__>

000029d2 <strnlen_P>:
    29d2:	fc 01       	movw	r30, r24
    29d4:	05 90       	lpm	r0, Z+
    29d6:	61 50       	subi	r22, 0x01	; 1
    29d8:	70 40       	sbci	r23, 0x00	; 0
    29da:	01 10       	cpse	r0, r1
    29dc:	d8 f7       	brcc	.-10     	; 0x29d4 <strnlen_P+0x2>
    29de:	80 95       	com	r24
    29e0:	90 95       	com	r25
    29e2:	8e 0f       	add	r24, r30
    29e4:	9f 1f       	adc	r25, r31
    29e6:	08 95       	ret

000029e8 <strnlen>:
    29e8:	fc 01       	movw	r30, r24
    29ea:	61 50       	subi	r22, 0x01	; 1
    29ec:	70 40       	sbci	r23, 0x00	; 0
    29ee:	01 90       	ld	r0, Z+
    29f0:	01 10       	cpse	r0, r1
    29f2:	d8 f7       	brcc	.-10     	; 0x29ea <strnlen+0x2>
    29f4:	80 95       	com	r24
    29f6:	90 95       	com	r25
    29f8:	8e 0f       	add	r24, r30
    29fa:	9f 1f       	adc	r25, r31
    29fc:	08 95       	ret

000029fe <fputc>:
    29fe:	0f 93       	push	r16
    2a00:	1f 93       	push	r17
    2a02:	cf 93       	push	r28
    2a04:	df 93       	push	r29
    2a06:	8c 01       	movw	r16, r24
    2a08:	eb 01       	movw	r28, r22
    2a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0c:	81 ff       	sbrs	r24, 1
    2a0e:	1b c0       	rjmp	.+54     	; 0x2a46 <fputc+0x48>
    2a10:	82 ff       	sbrs	r24, 2
    2a12:	0d c0       	rjmp	.+26     	; 0x2a2e <fputc+0x30>
    2a14:	2e 81       	ldd	r18, Y+6	; 0x06
    2a16:	3f 81       	ldd	r19, Y+7	; 0x07
    2a18:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a1c:	28 17       	cp	r18, r24
    2a1e:	39 07       	cpc	r19, r25
    2a20:	64 f4       	brge	.+24     	; 0x2a3a <fputc+0x3c>
    2a22:	e8 81       	ld	r30, Y
    2a24:	f9 81       	ldd	r31, Y+1	; 0x01
    2a26:	01 93       	st	Z+, r16
    2a28:	f9 83       	std	Y+1, r31	; 0x01
    2a2a:	e8 83       	st	Y, r30
    2a2c:	06 c0       	rjmp	.+12     	; 0x2a3a <fputc+0x3c>
    2a2e:	e8 85       	ldd	r30, Y+8	; 0x08
    2a30:	f9 85       	ldd	r31, Y+9	; 0x09
    2a32:	80 2f       	mov	r24, r16
    2a34:	09 95       	icall
    2a36:	89 2b       	or	r24, r25
    2a38:	31 f4       	brne	.+12     	; 0x2a46 <fputc+0x48>
    2a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a3e:	01 96       	adiw	r24, 0x01	; 1
    2a40:	9f 83       	std	Y+7, r25	; 0x07
    2a42:	8e 83       	std	Y+6, r24	; 0x06
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <fputc+0x4c>
    2a46:	0f ef       	ldi	r16, 0xFF	; 255
    2a48:	1f ef       	ldi	r17, 0xFF	; 255
    2a4a:	c8 01       	movw	r24, r16
    2a4c:	df 91       	pop	r29
    2a4e:	cf 91       	pop	r28
    2a50:	1f 91       	pop	r17
    2a52:	0f 91       	pop	r16
    2a54:	08 95       	ret

00002a56 <__ultoa_invert>:
    2a56:	fa 01       	movw	r30, r20
    2a58:	aa 27       	eor	r26, r26
    2a5a:	28 30       	cpi	r18, 0x08	; 8
    2a5c:	51 f1       	breq	.+84     	; 0x2ab2 <__ultoa_invert+0x5c>
    2a5e:	20 31       	cpi	r18, 0x10	; 16
    2a60:	81 f1       	breq	.+96     	; 0x2ac2 <__ultoa_invert+0x6c>
    2a62:	e8 94       	clt
    2a64:	6f 93       	push	r22
    2a66:	6e 7f       	andi	r22, 0xFE	; 254
    2a68:	6e 5f       	subi	r22, 0xFE	; 254
    2a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    2a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a70:	af 4f       	sbci	r26, 0xFF	; 255
    2a72:	b1 e0       	ldi	r27, 0x01	; 1
    2a74:	3e d0       	rcall	.+124    	; 0x2af2 <__ultoa_invert+0x9c>
    2a76:	b4 e0       	ldi	r27, 0x04	; 4
    2a78:	3c d0       	rcall	.+120    	; 0x2af2 <__ultoa_invert+0x9c>
    2a7a:	67 0f       	add	r22, r23
    2a7c:	78 1f       	adc	r23, r24
    2a7e:	89 1f       	adc	r24, r25
    2a80:	9a 1f       	adc	r25, r26
    2a82:	a1 1d       	adc	r26, r1
    2a84:	68 0f       	add	r22, r24
    2a86:	79 1f       	adc	r23, r25
    2a88:	8a 1f       	adc	r24, r26
    2a8a:	91 1d       	adc	r25, r1
    2a8c:	a1 1d       	adc	r26, r1
    2a8e:	6a 0f       	add	r22, r26
    2a90:	71 1d       	adc	r23, r1
    2a92:	81 1d       	adc	r24, r1
    2a94:	91 1d       	adc	r25, r1
    2a96:	a1 1d       	adc	r26, r1
    2a98:	20 d0       	rcall	.+64     	; 0x2ada <__ultoa_invert+0x84>
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <__ultoa_invert+0x48>
    2a9c:	68 94       	set
    2a9e:	3f 91       	pop	r19
    2aa0:	2a e0       	ldi	r18, 0x0A	; 10
    2aa2:	26 9f       	mul	r18, r22
    2aa4:	11 24       	eor	r1, r1
    2aa6:	30 19       	sub	r19, r0
    2aa8:	30 5d       	subi	r19, 0xD0	; 208
    2aaa:	31 93       	st	Z+, r19
    2aac:	de f6       	brtc	.-74     	; 0x2a64 <__ultoa_invert+0xe>
    2aae:	cf 01       	movw	r24, r30
    2ab0:	08 95       	ret
    2ab2:	46 2f       	mov	r20, r22
    2ab4:	47 70       	andi	r20, 0x07	; 7
    2ab6:	40 5d       	subi	r20, 0xD0	; 208
    2ab8:	41 93       	st	Z+, r20
    2aba:	b3 e0       	ldi	r27, 0x03	; 3
    2abc:	0f d0       	rcall	.+30     	; 0x2adc <__ultoa_invert+0x86>
    2abe:	c9 f7       	brne	.-14     	; 0x2ab2 <__ultoa_invert+0x5c>
    2ac0:	f6 cf       	rjmp	.-20     	; 0x2aae <__ultoa_invert+0x58>
    2ac2:	46 2f       	mov	r20, r22
    2ac4:	4f 70       	andi	r20, 0x0F	; 15
    2ac6:	40 5d       	subi	r20, 0xD0	; 208
    2ac8:	4a 33       	cpi	r20, 0x3A	; 58
    2aca:	18 f0       	brcs	.+6      	; 0x2ad2 <__ultoa_invert+0x7c>
    2acc:	49 5d       	subi	r20, 0xD9	; 217
    2ace:	31 fd       	sbrc	r19, 1
    2ad0:	40 52       	subi	r20, 0x20	; 32
    2ad2:	41 93       	st	Z+, r20
    2ad4:	02 d0       	rcall	.+4      	; 0x2ada <__ultoa_invert+0x84>
    2ad6:	a9 f7       	brne	.-22     	; 0x2ac2 <__ultoa_invert+0x6c>
    2ad8:	ea cf       	rjmp	.-44     	; 0x2aae <__ultoa_invert+0x58>
    2ada:	b4 e0       	ldi	r27, 0x04	; 4
    2adc:	a6 95       	lsr	r26
    2ade:	97 95       	ror	r25
    2ae0:	87 95       	ror	r24
    2ae2:	77 95       	ror	r23
    2ae4:	67 95       	ror	r22
    2ae6:	ba 95       	dec	r27
    2ae8:	c9 f7       	brne	.-14     	; 0x2adc <__ultoa_invert+0x86>
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	61 05       	cpc	r22, r1
    2aee:	71 05       	cpc	r23, r1
    2af0:	08 95       	ret
    2af2:	9b 01       	movw	r18, r22
    2af4:	ac 01       	movw	r20, r24
    2af6:	0a 2e       	mov	r0, r26
    2af8:	06 94       	lsr	r0
    2afa:	57 95       	ror	r21
    2afc:	47 95       	ror	r20
    2afe:	37 95       	ror	r19
    2b00:	27 95       	ror	r18
    2b02:	ba 95       	dec	r27
    2b04:	c9 f7       	brne	.-14     	; 0x2af8 <__ultoa_invert+0xa2>
    2b06:	62 0f       	add	r22, r18
    2b08:	73 1f       	adc	r23, r19
    2b0a:	84 1f       	adc	r24, r20
    2b0c:	95 1f       	adc	r25, r21
    2b0e:	a0 1d       	adc	r26, r0
    2b10:	08 95       	ret

00002b12 <_exit>:
    2b12:	f8 94       	cli

00002b14 <__stop_program>:
    2b14:	ff cf       	rjmp	.-2      	; 0x2b14 <__stop_program>
